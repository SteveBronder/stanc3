
#include <vector>
#include <Eigen/Dense>
#include <Eigen/Sparse>

template <typename T, typename S>
std::vector<T> resize_to_match(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace example_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'example.stan', line 8, column 0 to column 21)",
                                                      " (in 'example.stan', line 11, column 0 to column 33)",
                                                      " (in 'example.stan', line 2, column 0 to column 21)",
                                                      " (in 'example.stan', line 3, column 0 to column 21)",
                                                      " (in 'example.stan', line 4, column 0 to column 51)",
                                                      " (in 'example.stan', line 5, column 0 to column 25)"};


class example_model : public model_base_crtp<example_model> {

 private:
  int pos__;
  int row_size;
  int col_size;
  Eigen::SparseMatrix<double> x_matrix;
  Eigen::Matrix<double, -1, 1> y_vector;

 public:
  ~example_model() { }

  std::string model_name() const { return "example_model"; }

  example_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ =
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "example_model_namespace::example_model";
    (void) function__;  // suppress unused var warning

    try {


      current_statement__ = 4;
      row_size = context__.vals_i("row_size")[(1 - 1)];

      current_statement__ = 5;
      col_size = context__.vals_i("col_size")[(1 - 1)];
      x_matrix = Eigen::SparseMatrix<double>(row_size, col_size);

      current_statement__ = 6;
      pos__ = 1;
      current_statement__ = 6;
      for (size_t sym2__ = 1; sym2__ <= col_size; ++sym2__) {
        current_statement__ = 6;
        for (size_t sym1__ = 1; sym1__ <= row_size; ++sym1__) {
          current_statement__ = 6;
          x_matrix[(sym1__ - 1)][(sym2__ - 1)] = context__.vals_r("x_matrix")[(pos__ - 1)];
          current_statement__ = 6;
          pos__ = (pos__ + 1);}}
      y_vector = Eigen::Matrix<double, -1, 1>(row_size);

      current_statement__ = 7;
      pos__ = 1;
      current_statement__ = 7;
      for (size_t sym1__ = 1; sym1__ <= row_size; ++sym1__) {
        current_statement__ = 7;
        y_vector[(sym1__ - 1)] = context__.vals_r("y_vector")[(pos__ - 1)];
        current_statement__ = 7;
        pos__ = (pos__ + 1);}
      current_statement__ = 4;
      current_statement__ = 4;
      check_greater_or_equal(function__, "row_size", row_size, 0);
      current_statement__ = 5;
      current_statement__ = 5;
      check_greater_or_equal(function__, "col_size", col_size, 0);
      current_statement__ = 6;
      current_statement__ = 6;
      check_greater_or_equal(function__, "x_matrix", x_matrix, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
    num_params_r__ = 0U;
    num_params_r__ += col_size;

  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "example_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(col_size);

      current_statement__ = 2;
      beta = in__.vector(col_size);
      {
        current_statement__ = 3;
        lp_accum__.add(normal_log<propto__>(y_vector,
                                            multiply(x_matrix, beta), 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob()

  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "example_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning


    try {
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(col_size);

      current_statement__ = 2;
      beta = in__.vector(col_size);
      for (size_t sym1__ = 1; sym1__ <= col_size; ++sym1__) {
        vars__.push_back(beta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
    } // write_array()

  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);

    try {
      int pos__;

      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(col_size);

      current_statement__ = 2;
      pos__ = 1;
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= col_size; ++sym1__) {
        current_statement__ = 2;
        beta[(sym1__ - 1)] = context__.vals_r("beta")[(pos__ - 1)];
        current_statement__ = 2;
        pos__ = (pos__ + 1);}
      for (size_t sym1__ = 1; sym1__ <= col_size; ++sym1__) {
        vars__.push_back(beta[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
    } // transform_inits()

  void get_param_names(std::vector<std::string>& names__) const {

    names__.resize(0);
    names__.push_back("beta");
    } // get_param_names()

  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dims__.push_back(col_size);
    dimss__.push_back(dims__);
    dims__.resize(0);

    } // get_dims()

  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {

    for (size_t sym1__ = 1; sym1__ <= col_size; ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {

    }

    if (emit_generated_quantities__) {

    }

    } // constrained_param_names()

  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {

    for (size_t sym1__ = 1; sym1__ <= col_size; ++sym1__) {
      {
        param_names__.push_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {

    }

    if (emit_generated_quantities__) {

    }

    } // unconstrained_param_names()

  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << col_size << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes()

  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << col_size << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes()


    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef example_model_namespace::example_model stan_model;

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
