
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace mem_patterns_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 27> locations_array__ = 
{" (found before start of program)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 9, column 1 to column 12)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 10, column 1 to column 21)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 11, column 1 to column 35)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 12, column 1 to column 31)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 13, column 1 to column 35)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 17, column 1 to column 55)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 18, column 1 to column 40)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 22, column 2 to column 54)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 24, column 6 to column 57)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 23, column 18 to line 25, column 3)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 23, column 2 to line 25, column 3)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 28, column 6 to column 60)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 27, column 18 to line 29, column 3)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 27, column 2 to line 29, column 3)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 2, column 1 to column 7)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 3, column 1 to column 7)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 4, column 8 to column 9)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 4, column 11 to column 12)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 4, column 1 to column 20)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 5, column 8 to column 9)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 5, column 1 to column 13)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 10, column 8 to column 9)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 11, column 18 to column 19)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 12, column 8 to column 9)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 13, column 8 to column 9)",
 " (in 'test/integration/good/code-gen/mem_patterns.stan', line 17, column 8 to column 9)"};



class mem_patterns_model final : public model_base_crtp<mem_patterns_model> {

 private:
  int N;
  int M;
  Eigen::Matrix<double, -1, -1> dat_x__;
  Eigen::Matrix<double, -1, 1> y__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> dat_x{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
 
 public:
  ~mem_patterns_model() { }
  
  inline std::string model_name() const final { return "mem_patterns_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = "};
  }
  
  
  mem_patterns_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::mem_patterns_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 15;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 15;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 17;
      validate_non_negative_index("dat_x", "N", N);
      current_statement__ = 18;
      validate_non_negative_index("dat_x", "M", M);
      current_statement__ = 19;
      context__.validate_dims("data initialization","dat_x","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(M)});
      dat_x__ = Eigen::Matrix<double, -1, -1>::Constant(N, M, std::numeric_limits<double>::quiet_NaN());
      new (&dat_x) Eigen::Map<Eigen::Matrix<double, -1, -1>>(dat_x__.data(), N, M);
      
      
      {
        std::vector<local_scalar_t__> dat_x_flat__;
        current_statement__ = 19;
        dat_x_flat__ = context__.vals_r("dat_x");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 19;
            assign(dat_x, dat_x_flat__[(pos__ - 1)],
              "assigning variable dat_x", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 19;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 20;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 21;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 21;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 21;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 21;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 22;
      validate_non_negative_index("vec_v_soa", "M", M);
      current_statement__ = 23;
      validate_non_negative_index("arr_vec_v_soa", "N", N);
      current_statement__ = 24;
      validate_non_negative_index("vec_v_aos_for_loopd", "M", M);
      current_statement__ = 25;
      validate_non_negative_index("vec_v_aos_assign_to_aos", "M", M);
      current_statement__ = 26;
      validate_non_negative_index("tp_vec_v_aos", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 1 + M + (10 * N) + M + M;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ alpha = DUMMY_VAR__;
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> vec_v_soa = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 2;
      vec_v_soa = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                    M);
      stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> arr_vec_v_soa = 
      std::vector<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(10, stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 3;
      arr_vec_v_soa = in__.template read<stan::conditional_var_value_t<local_scalar_t__, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(
                        10, N);
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>> vec_v_aos_for_loopd = 
      stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>(Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 4;
      vec_v_aos_for_loopd = in__.template read<stan::conditional_var_value_t<local_scalar_t__, Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                              M);
      Eigen::Matrix<local_scalar_t__, -1, 1> vec_v_aos_assign_to_aos = 
      Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
      
      current_statement__ = 5;
      vec_v_aos_assign_to_aos = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                  M);
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_vec_v_aos = Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(M, DUMMY_VAR__);
                                                            
      
      current_statement__ = 6;
      assign(tp_vec_v_aos, inv(vec_v_aos_assign_to_aos),
        "assigning variable tp_vec_v_aos");
      current_statement__ = 7;
      assign(tp_vec_v_aos, vec_v_aos_assign_to_aos,
        "assigning variable tp_vec_v_aos");
      {
        current_statement__ = 8;
        lp_accum__.add(
          normal_lpdf<propto__>(y, add(alpha, multiply(dat_x, vec_v_soa)),
            1.0));
        current_statement__ = 11;
        for (int i = 1; i <= 10; ++i) {
          current_statement__ = 9;
          lp_accum__.add(
            normal_lpdf<propto__>(y,
              multiply(dat_x,
                rvalue(arr_vec_v_soa, "arr_vec_v_soa", index_uni(i))), 1.0));
        }
        current_statement__ = 14;
        for (int i = 1; i <= 10; ++i) {
          current_statement__ = 12;
          lp_accum__.add(
            normal_lpdf<propto__>(y, multiply(dat_x, vec_v_aos_for_loopd),
              1.0));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "mem_patterns_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> vec_v_soa = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                               
      
      current_statement__ = 2;
      vec_v_soa = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    M);
      std::vector<Eigen::Matrix<double, -1, 1>> arr_vec_v_soa = std::vector<Eigen::Matrix<double, -1, 1>>(10, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                
      
      current_statement__ = 3;
      arr_vec_v_soa = in__.template read<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(
                        10, N);
      Eigen::Matrix<double, -1, 1> vec_v_aos_for_loopd = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                         
      
      current_statement__ = 4;
      vec_v_aos_for_loopd = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                              M);
      Eigen::Matrix<double, -1, 1> vec_v_aos_assign_to_aos = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                             
      
      current_statement__ = 5;
      vec_v_aos_assign_to_aos = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                  M);
      Eigen::Matrix<double, -1, 1> tp_vec_v_aos = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                  
      
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(vec_v_soa[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          vars__.emplace_back(arr_vec_v_soa[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(vec_v_aos_for_loopd[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(vec_v_aos_assign_to_aos[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      assign(tp_vec_v_aos, inv(vec_v_aos_assign_to_aos),
        "assigning variable tp_vec_v_aos");
      current_statement__ = 7;
      assign(tp_vec_v_aos, vec_v_aos_assign_to_aos,
        "assigning variable tp_vec_v_aos");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(tp_vec_v_aos[(sym1__ - 1)]);
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> vec_v_soa = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                               
      
      {
        std::vector<local_scalar_t__> vec_v_soa_flat__;
        current_statement__ = 2;
        vec_v_soa_flat__ = context__.vals_r("vec_v_soa");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 2;
          assign(vec_v_soa, vec_v_soa_flat__[(pos__ - 1)],
            "assigning variable vec_v_soa", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      std::vector<Eigen::Matrix<double, -1, 1>> arr_vec_v_soa = std::vector<Eigen::Matrix<double, -1, 1>>(10, Eigen::Matrix<double, -1, 1>::Constant(N, std::numeric_limits<double>::quiet_NaN()));
                                                                
      
      {
        std::vector<local_scalar_t__> arr_vec_v_soa_flat__;
        current_statement__ = 3;
        arr_vec_v_soa_flat__ = context__.vals_r("arr_vec_v_soa");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
            current_statement__ = 3;
            assign(arr_vec_v_soa, arr_vec_v_soa_flat__[(pos__ - 1)],
              "assigning variable arr_vec_v_soa", index_uni(sym2__),
                                                    index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, 1> vec_v_aos_for_loopd = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                         
      
      {
        std::vector<local_scalar_t__> vec_v_aos_for_loopd_flat__;
        current_statement__ = 4;
        vec_v_aos_for_loopd_flat__ = context__.vals_r("vec_v_aos_for_loopd");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 4;
          assign(vec_v_aos_for_loopd,
            vec_v_aos_for_loopd_flat__[(pos__ - 1)],
            "assigning variable vec_v_aos_for_loopd", index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> vec_v_aos_assign_to_aos = Eigen::Matrix<double, -1, 1>::Constant(M, std::numeric_limits<double>::quiet_NaN());
                                                             
      
      {
        std::vector<local_scalar_t__> vec_v_aos_assign_to_aos_flat__;
        current_statement__ = 5;
        vec_v_aos_assign_to_aos_flat__ = context__.vals_r("vec_v_aos_assign_to_aos");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 5;
          assign(vec_v_aos_assign_to_aos,
            vec_v_aos_assign_to_aos_flat__[(pos__ - 1)],
            "assigning variable vec_v_aos_assign_to_aos", index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      vars__.emplace_back(alpha);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(vec_v_soa[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 10; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(arr_vec_v_soa[(sym1__ - 1)][(sym2__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(vec_v_aos_for_loopd[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(vec_v_aos_assign_to_aos[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "vec_v_soa", "arr_vec_v_soa",
      "vec_v_aos_for_loopd", "vec_v_aos_assign_to_aos", "tp_vec_v_aos"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(10), static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)},
      std::vector<size_t>{static_cast<size_t>(M)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vec_v_soa" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "arr_vec_v_soa" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vec_v_aos_for_loopd" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vec_v_aos_assign_to_aos" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_vec_v_aos" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "alpha");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vec_v_soa" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= 10; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "arr_vec_v_soa" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vec_v_aos_for_loopd" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "vec_v_aos_assign_to_aos" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tp_vec_v_aos" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vec_v_soa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"arr_vec_v_soa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(10) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"vec_v_aos_for_loopd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"vec_v_aos_assign_to_aos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tp_vec_v_aos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vec_v_soa\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"arr_vec_v_soa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(10) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"parameters\"},{\"name\":\"vec_v_aos_for_loopd\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"vec_v_aos_assign_to_aos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"parameters\"},{\"name\":\"tp_vec_v_aos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = mem_patterns_model_namespace::mem_patterns_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return mem_patterns_model_namespace::profiles__;
}

#endif


