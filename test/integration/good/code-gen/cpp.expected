  $ ../../../../../install/default/bin/stanc --print-cpp eight_schools_ncp.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace eight_schools_ncp_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'eight_schools_ncp.stan', line 8, column 2 to column 10)",
                                                      " (in 'eight_schools_ncp.stan', line 9, column 2 to column 20)",
                                                      " (in 'eight_schools_ncp.stan', line 10, column 2 to column 22)",
                                                      " (in 'eight_schools_ncp.stan', line 14, column 2 to column 16)",
                                                      " (in 'eight_schools_ncp.stan', line 16, column 4 to column 41)",
                                                      " (in 'eight_schools_ncp.stan', line 15, column 2 to line 16, column 41)",
                                                      " (in 'eight_schools_ncp.stan', line 20, column 2 to column 20)",
                                                      " (in 'eight_schools_ncp.stan', line 21, column 2 to column 21)",
                                                      " (in 'eight_schools_ncp.stan', line 22, column 2 to column 29)",
                                                      " (in 'eight_schools_ncp.stan', line 23, column 2 to column 27)",
                                                      " (in 'eight_schools_ncp.stan', line 2, column 2 to column 17)",
                                                      " (in 'eight_schools_ncp.stan', line 3, column 2 to column 12)",
                                                      " (in 'eight_schools_ncp.stan', line 4, column 2 to column 25)"};


class eight_schools_ncp_model : public prob_grad {

 private:
  int pos__;
  int J;
  std::vector<double> y;
  std::vector<double> sigma;
 
 public:
  ~eight_schools_ncp_model() { }
  
  static std::string model_name() { return "eight_schools_ncp_model"; }
  
  eight_schools_ncp_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "eight_schools_ncp_model_namespace::eight_schools_ncp_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      
      current_statement__ = 12;
      J = context__.vals_i("J")[(1 - 1)];
      y = std::vector<double>(J, 0);
      
      current_statement__ = 13;
      pos__ = 1;
      current_statement__ = 13;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 13;
        assign(y, cons_list(index_uni(sym1__), nil_index_list()), context__.vals_r("y")
                                                                  [(pos__ - 1)], "assigning variable y[(sym1__ - 1)]");
        current_statement__ = 13;
        pos__ = (pos__ + 1);}
      sigma = std::vector<double>(J, 0);
      
      current_statement__ = 14;
      pos__ = 1;
      current_statement__ = 14;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 14;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()), 
               context__.vals_r("sigma")[(pos__ - 1)], "assigning variable sigma[(sym1__ - 1)]");
        current_statement__ = 14;
        pos__ = (pos__ + 1);}
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 14;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_greater_or_equal(function__, "sigma[sym1__]",
                               rvalue(sigma, cons_list(index_uni(sym1__), nil_index_list()), "pretty printed e"),
                               0);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += 1;
    num_params_r__ += J;
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "eight_schools_ncp_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ mu;
      
      current_statement__ = 2;
      mu = in__.scalar();
      local_scalar_t__ tau;
      
      current_statement__ = 3;
      tau = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        tau = lb_constrain(tau, 0, lp__);
      } else {
        current_statement__ = 3;
        tau = lb_constrain(tau, 0);
      }
      std::vector<local_scalar_t__> theta_tilde;
      theta_tilde = std::vector<local_scalar_t__>(J, 0);
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        assign(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(
               ), "assigning variable theta_tilde[(sym1__ - 1)]");}
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(J, 0);
      
      current_statement__ = 7;
      for (size_t j = 1; j <= J; ++j) {
        current_statement__ = 6;
        assign(theta, cons_list(index_uni(j), nil_index_list()), (mu + (tau * rvalue(theta_tilde, cons_list(index_uni(j), nil_index_list()), "pretty printed e"))), "assigning variable theta[(j - 1)]");
      }
      {
        current_statement__ = 8;
        lp_accum__.add(normal_log<propto__>(mu, 0, 5));
        current_statement__ = 9;
        lp_accum__.add(cauchy_log<propto__>(tau, 0, 5));
        current_statement__ = 10;
        lp_accum__.add(normal_log<propto__>(theta_tilde, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(normal_log<propto__>(y, theta, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("mu");
    names__.push_back("tau");
    names__.push_back("theta_tilde");
    names__.push_back("theta");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "eight_schools_ncp_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double mu;
      
      current_statement__ = 2;
      mu = in__.scalar();
      double tau;
      
      current_statement__ = 3;
      tau = in__.scalar();
      current_statement__ = 3;
      tau = lb_constrain(tau, 0);
      std::vector<double> theta_tilde;
      theta_tilde = std::vector<double>(J, 0);
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        assign(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(
               ), "assigning variable theta_tilde[(sym1__ - 1)]");}
      vars__.push_back(mu);
      vars__.push_back(tau);
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.push_back(rvalue(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), "pretty printed e"));
      }
      std::vector<double> theta;
      theta = std::vector<double>(J, 0);
      
      if (emit_transformed_parameters__ || emit_generated_quantities__) {
        current_statement__ = 7;
        for (size_t j = 1; j <= J; ++j) {
          current_statement__ = 6;
          assign(theta, cons_list(index_uni(j), nil_index_list()), (mu + (tau * rvalue(theta_tilde, cons_list(index_uni(j), nil_index_list()), "pretty printed e"))), "assigning variable theta[(j - 1)]");
        }
        for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
          vars__.push_back(rvalue(theta, cons_list(index_uni(sym1__), nil_index_list()), "pretty printed e"));
        }
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "mu");
    param_names__.push_back(std::string() + "tau");
    for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.push_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.push_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "mu");
    param_names__.push_back(std::string() + "tau");
    for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.push_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.push_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      double mu;
      
      current_statement__ = 2;
      mu = context__.vals_r("mu")[(1 - 1)];
      double tau;
      
      current_statement__ = 3;
      tau = context__.vals_r("tau")[(1 - 1)];
      current_statement__ = 3;
      tau = lb_free(tau, 0);
      std::vector<double> theta_tilde;
      theta_tilde = std::vector<double>(J, 0);
      
      current_statement__ = 4;
      pos__ = 1;
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        assign(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), 
               context__.vals_r("theta_tilde")[(pos__ - 1)], "assigning variable theta_tilde[(sym1__ - 1)]");
        current_statement__ = 4;
        pos__ = (pos__ + 1);}
      vars__.push_back(mu);
      vars__.push_back(tau);
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        vars__.push_back(rvalue(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), "pretty printed e"));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

};
}

typedef eight_schools_ncp_model_namespace::eight_schools_ncp_model stan_model;

  $ ../../../../../install/default/bin/stanc --print-cpp mother.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace mother_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'mother.stan', line 269, column 2 to column 14)",
                                                      " (in 'mother.stan', line 270, column 2 to column 32)",
                                                      " (in 'mother.stan', line 271, column 2 to column 36)",
                                                      " (in 'mother.stan', line 272, column 2 to column 27)",
                                                      " (in 'mother.stan', line 273, column 2 to column 24)",
                                                      " (in 'mother.stan', line 274, column 2 to column 28)",
                                                      " (in 'mother.stan', line 275, column 2 to column 26)",
                                                      " (in 'mother.stan', line 276, column 2 to column 32)",
                                                      " (in 'mother.stan', line 277, column 2 to column 36)",
                                                      " (in 'mother.stan', line 278, column 2 to column 45)",
                                                      " (in 'mother.stan', line 279, column 2 to column 23)",
                                                      " (in 'mother.stan', line 280, column 2 to column 29)",
                                                      " (in 'mother.stan', line 281, column 2 to column 33)",
                                                      " (in 'mother.stan', line 282, column 2 to column 38)",
                                                      " (in 'mother.stan', line 283, column 2 to column 36)",
                                                      " (in 'mother.stan', line 284, column 2 to column 42)",
                                                      " (in 'mother.stan', line 287, column 2 to column 33)",
                                                      " (in 'mother.stan', line 288, column 2 to column 37)",
                                                      " (in 'mother.stan', line 289, column 2 to column 28)",
                                                      " (in 'mother.stan', line 290, column 2 to column 25)",
                                                      " (in 'mother.stan', line 291, column 2 to column 29)",
                                                      " (in 'mother.stan', line 292, column 2 to column 27)",
                                                      " (in 'mother.stan', line 293, column 2 to column 33)",
                                                      " (in 'mother.stan', line 294, column 2 to column 37)",
                                                      " (in 'mother.stan', line 295, column 2 to column 46)",
                                                      " (in 'mother.stan', line 296, column 2 to column 24)",
                                                      " (in 'mother.stan', line 297, column 2 to column 30)",
                                                      " (in 'mother.stan', line 298, column 2 to column 34)",
                                                      " (in 'mother.stan', line 299, column 2 to column 39)",
                                                      " (in 'mother.stan', line 300, column 2 to column 37)",
                                                      " (in 'mother.stan', line 301, column 2 to column 43)",
                                                      " (in 'mother.stan', line 303, column 2 to column 31)",
                                                      " (in 'mother.stan', line 304, column 2 to column 31)",
                                                      " (in 'mother.stan', line 305, column 2 to column 23)",
                                                      " (in 'mother.stan', line 306, column 2 to column 23)",
                                                      " (in 'mother.stan', line 308, column 2 to column 25)",
                                                      " (in 'mother.stan', line 309, column 2 to column 31)",
                                                      " (in 'mother.stan', line 310, column 2 to column 31)",
                                                      " (in 'mother.stan', line 312, column 2 to column 27)",
                                                      " (in 'mother.stan', line 313, column 2 to column 27)",
                                                      " (in 'mother.stan', line 314, column 2 to column 33)",
                                                      " (in 'mother.stan', line 320, column 10 to column 38)",
                                                      " (in 'mother.stan', line 319, column 23 to line 320, column 39)",
                                                      " (in 'mother.stan', line 319, column 8 to line 320, column 39)",
                                                      " (in 'mother.stan', line 318, column 21 to line 320, column 40)",
                                                      " (in 'mother.stan', line 318, column 6 to line 320, column 40)",
                                                      " (in 'mother.stan', line 317, column 19 to line 320, column 41)",
                                                      " (in 'mother.stan', line 317, column 4 to line 320, column 41)",
                                                      " (in 'mother.stan', line 316, column 17 to line 320, column 42)",
                                                      " (in 'mother.stan', line 316, column 2 to line 320, column 42)",
                                                      " (in 'mother.stan', line 322, column 17 to column 45)",
                                                      " (in 'mother.stan', line 322, column 2 to column 45)",
                                                      " (in 'mother.stan', line 358, column 2 to column 32)",
                                                      " (in 'mother.stan', line 359, column 2 to column 27)",
                                                      " (in 'mother.stan', line 360, column 2 to column 35)",
                                                      " (in 'mother.stan', line 361, column 2 to column 39)",
                                                      " (in 'mother.stan', line 362, column 2 to column 28)",
                                                      " (in 'mother.stan', line 363, column 2 to column 25)",
                                                      " (in 'mother.stan', line 364, column 2 to column 29)",
                                                      " (in 'mother.stan', line 365, column 2 to column 27)",
                                                      " (in 'mother.stan', line 366, column 2 to column 33)",
                                                      " (in 'mother.stan', line 367, column 2 to column 37)",
                                                      " (in 'mother.stan', line 368, column 2 to column 46)",
                                                      " (in 'mother.stan', line 369, column 2 to column 24)",
                                                      " (in 'mother.stan', line 370, column 2 to column 30)",
                                                      " (in 'mother.stan', line 371, column 2 to column 34)",
                                                      " (in 'mother.stan', line 372, column 2 to column 39)",
                                                      " (in 'mother.stan', line 373, column 2 to column 37)",
                                                      " (in 'mother.stan', line 374, column 2 to column 43)",
                                                      " (in 'mother.stan', line 376, column 2 to column 31)",
                                                      " (in 'mother.stan', line 377, column 2 to column 31)",
                                                      " (in 'mother.stan', line 378, column 2 to column 23)",
                                                      " (in 'mother.stan', line 379, column 2 to column 23)",
                                                      " (in 'mother.stan', line 381, column 2 to column 25)",
                                                      " (in 'mother.stan', line 382, column 2 to column 31)",
                                                      " (in 'mother.stan', line 383, column 2 to column 31)",
                                                      " (in 'mother.stan', line 385, column 2 to column 27)",
                                                      " (in 'mother.stan', line 386, column 2 to column 27)",
                                                      " (in 'mother.stan', line 387, column 2 to column 33)",
                                                      " (in 'mother.stan', line 393, column 10 to column 38)",
                                                      " (in 'mother.stan', line 392, column 23 to line 393, column 39)",
                                                      " (in 'mother.stan', line 392, column 8 to line 393, column 39)",
                                                      " (in 'mother.stan', line 391, column 21 to line 393, column 40)",
                                                      " (in 'mother.stan', line 391, column 6 to line 393, column 40)",
                                                      " (in 'mother.stan', line 390, column 19 to line 393, column 41)",
                                                      " (in 'mother.stan', line 390, column 4 to line 393, column 41)",
                                                      " (in 'mother.stan', line 389, column 17 to line 393, column 42)",
                                                      " (in 'mother.stan', line 389, column 2 to line 393, column 42)",
                                                      " (in 'mother.stan', line 396, column 17 to column 45)",
                                                      " (in 'mother.stan', line 396, column 2 to column 45)",
                                                      " (in 'mother.stan', line 325, column 2 to column 29)",
                                                      " (in 'mother.stan', line 326, column 2 to column 24)",
                                                      " (in 'mother.stan', line 327, column 2 to column 23)",
                                                      " (in 'mother.stan', line 329, column 2 to column 41)",
                                                      " (in 'mother.stan', line 331, column 4 to column 42)",
                                                      " (in 'mother.stan', line 332, column 4 to column 46)",
                                                      " (in 'mother.stan', line 333, column 4 to column 46)",
                                                      " (in 'mother.stan', line 336, column 8 to column 52)",
                                                      " (in 'mother.stan', line 337, column 8 to column 56)",
                                                      " (in 'mother.stan', line 338, column 8 to column 56)",
                                                      " (in 'mother.stan', line 339, column 8 to column 45)",
                                                      " (in 'mother.stan', line 335, column 21 to line 340, column 7)",
                                                      " (in 'mother.stan', line 335, column 6 to line 340, column 7)",
                                                      " (in 'mother.stan', line 334, column 19 to line 341, column 5)",
                                                      " (in 'mother.stan', line 334, column 4 to line 341, column 5)",
                                                      " (in 'mother.stan', line 330, column 17 to line 342, column 3)",
                                                      " (in 'mother.stan', line 330, column 2 to line 342, column 3)",
                                                      " (in 'mother.stan', line 345, column 6 to column 47)",
                                                      " (in 'mother.stan', line 344, column 19 to line 346, column 5)",
                                                      " (in 'mother.stan', line 344, column 4 to line 346, column 5)",
                                                      " (in 'mother.stan', line 343, column 17 to line 347, column 3)",
                                                      " (in 'mother.stan', line 343, column 2 to line 347, column 3)",
                                                      " (in 'mother.stan', line 349, column 4 to column 47)",
                                                      " (in 'mother.stan', line 348, column 17 to line 350, column 3)",
                                                      " (in 'mother.stan', line 348, column 2 to line 350, column 3)",
                                                      " (in 'mother.stan', line 351, column 2 to column 34)",
                                                      " (in 'mother.stan', line 352, column 2 to column 38)",
                                                      " (in 'mother.stan', line 353, column 2 to column 38)",
                                                      " (in 'mother.stan', line 354, column 2 to column 39)",
                                                      " (in 'mother.stan', line 355, column 2 to column 39)",
                                                      " (in 'mother.stan', line 209, column 2 to column 17)",
                                                      " (in 'mother.stan', line 210, column 2 to column 17)",
                                                      " (in 'mother.stan', line 211, column 2 to column 28)",
                                                      " (in 'mother.stan', line 212, column 2 to column 30)",
                                                      " (in 'mother.stan', line 213, column 2 to column 34)",
                                                      " (in 'mother.stan', line 214, column 2 to column 32)",
                                                      " (in 'mother.stan', line 215, column 2 to column 23)",
                                                      " (in 'mother.stan', line 216, column 2 to column 27)",
                                                      " (in 'mother.stan', line 217, column 2 to column 18)",
                                                      " (in 'mother.stan', line 218, column 2 to column 24)",
                                                      " (in 'mother.stan', line 219, column 2 to column 28)",
                                                      " (in 'mother.stan', line 220, column 2 to column 26)",
                                                      " (in 'mother.stan', line 221, column 2 to column 32)",
                                                      " (in 'mother.stan', line 222, column 2 to column 36)",
                                                      " (in 'mother.stan', line 223, column 2 to column 45)",
                                                      " (in 'mother.stan', line 224, column 2 to column 23)",
                                                      " (in 'mother.stan', line 225, column 2 to column 29)",
                                                      " (in 'mother.stan', line 226, column 2 to column 33)",
                                                      " (in 'mother.stan', line 227, column 2 to column 38)",
                                                      " (in 'mother.stan', line 228, column 2 to column 36)",
                                                      " (in 'mother.stan', line 229, column 2 to column 42)",
                                                      " (in 'mother.stan', line 232, column 2 to column 15)",
                                                      " (in 'mother.stan', line 233, column 2 to column 20)",
                                                      " (in 'mother.stan', line 234, column 2 to column 29)",
                                                      " (in 'mother.stan', line 235, column 2 to column 46)",
                                                      " (in 'mother.stan', line 236, column 2 to column 24)",
                                                      " (in 'mother.stan', line 237, column 2 to column 30)",
                                                      " (in 'mother.stan', line 238, column 2 to column 34)",
                                                      " (in 'mother.stan', line 239, column 2 to column 39)",
                                                      " (in 'mother.stan', line 240, column 2 to column 37)",
                                                      " (in 'mother.stan', line 245, column 10 to column 38)",
                                                      " (in 'mother.stan', line 244, column 23 to line 245, column 39)",
                                                      " (in 'mother.stan', line 244, column 8 to line 245, column 39)",
                                                      " (in 'mother.stan', line 243, column 21 to line 245, column 40)",
                                                      " (in 'mother.stan', line 243, column 6 to line 245, column 40)",
                                                      " (in 'mother.stan', line 242, column 19 to line 245, column 41)",
                                                      " (in 'mother.stan', line 242, column 4 to line 245, column 41)",
                                                      " (in 'mother.stan', line 241, column 17 to line 245, column 42)",
                                                      " (in 'mother.stan', line 241, column 2 to line 245, column 42)",
                                                      " (in 'mother.stan', line 247, column 4 to column 28)",
                                                      " (in 'mother.stan', line 249, column 6 to column 36)",
                                                      " (in 'mother.stan', line 252, column 10 to column 46)",
                                                      " (in 'mother.stan', line 251, column 23 to line 252, column 47)",
                                                      " (in 'mother.stan', line 251, column 8 to line 252, column 47)",
                                                      " (in 'mother.stan', line 250, column 21 to line 252, column 48)",
                                                      " (in 'mother.stan', line 250, column 6 to line 252, column 48)",
                                                      " (in 'mother.stan', line 248, column 19 to line 252, column 49)",
                                                      " (in 'mother.stan', line 248, column 4 to line 252, column 49)",
                                                      " (in 'mother.stan', line 246, column 17 to line 252, column 50)",
                                                      " (in 'mother.stan', line 246, column 2 to line 252, column 50)",
                                                      " (in 'mother.stan', line 255, column 6 to column 40)",
                                                      " (in 'mother.stan', line 256, column 6 to column 63)",
                                                      " (in 'mother.stan', line 254, column 19 to line 257, column 5)",
                                                      " (in 'mother.stan', line 254, column 4 to line 257, column 5)",
                                                      " (in 'mother.stan', line 253, column 17 to line 257, column 6)",
                                                      " (in 'mother.stan', line 253, column 2 to line 257, column 6)",
                                                      " (in 'mother.stan', line 258, column 2 to column 62)",
                                                      " (in 'mother.stan', line 259, column 2 to column 62)",
                                                      " (in 'mother.stan', line 261, column 4 to column 11)",
                                                      " (in 'mother.stan', line 262, column 4 to column 35)",
                                                      " (in 'mother.stan', line 263, column 4 to line 265, column 5)",
                                                      " (in 'mother.stan', line 264, column 6 to column 12)",
                                                      " (in 'mother.stan', line 260, column 2 to line 266, column 3)",
                                                      " (in 'mother.stan', line 10, column 16 to column 17)",
                                                      " (in 'mother.stan', line 13, column 16 to column 25)",
                                                      " (in 'mother.stan', line 13, column 4 to column 25)",
                                                      " (in 'mother.stan', line 14, column 4 to column 26)",
                                                      " (in 'mother.stan', line 12, column 17 to line 15, column 3)",
                                                      " (in 'mother.stan', line 22, column 31 to column 32)",
                                                      " (in 'mother.stan', line 29, column 4 to column 17)",
                                                      " (in 'mother.stan', line 30, column 4 to column 19)",
                                                      " (in 'mother.stan', line 31, column 4 to column 38)",
                                                      " (in 'mother.stan', line 32, column 4 to column 16)",
                                                      " (in 'mother.stan', line 28, column 31 to line 33, column 3)",
                                                      " (in 'mother.stan', line 36, column 4 to column 15)",
                                                      " (in 'mother.stan', line 35, column 18 to line 37, column 3)",
                                                      " (in 'mother.stan', line 40, column 4 to column 15)",
                                                      " (in 'mother.stan', line 39, column 24 to line 41, column 3)",
                                                      " (in 'mother.stan', line 44, column 4 to column 15)",
                                                      " (in 'mother.stan', line 43, column 32 to line 45, column 3)",
                                                      " (in 'mother.stan', line 48, column 4 to column 15)",
                                                      " (in 'mother.stan', line 47, column 36 to line 49, column 3)",
                                                      " (in 'mother.stan', line 52, column 4 to column 15)",
                                                      " (in 'mother.stan', line 51, column 36 to line 53, column 3)",
                                                      " (in 'mother.stan', line 56, column 4 to column 15)",
                                                      " (in 'mother.stan', line 55, column 37 to line 57, column 3)",
                                                      " (in 'mother.stan', line 60, column 4 to column 42)",
                                                      " (in 'mother.stan', line 61, column 4 to column 26)",
                                                      " (in 'mother.stan', line 59, column 30 to line 62, column 3)",
                                                      " (in 'mother.stan', line 66, column 14 to column 20)",
                                                      " (in 'mother.stan', line 66, column 4 to column 20)",
                                                      " (in 'mother.stan', line 67, column 14 to column 23)",
                                                      " (in 'mother.stan', line 67, column 4 to column 23)",
                                                      " (in 'mother.stan', line 70, column 20 to column 26)",
                                                      " (in 'mother.stan', line 70, column 4 to column 26)",
                                                      " (in 'mother.stan', line 71, column 20 to column 29)",
                                                      " (in 'mother.stan', line 71, column 4 to column 29)",
                                                      " (in 'mother.stan', line 75, column 6 to column 12)",
                                                      " (in 'mother.stan', line 76, column 6 to column 12)",
                                                      " (in 'mother.stan', line 77, column 6 to column 12)",
                                                      " (in 'mother.stan', line 74, column 14 to line 78, column 5)",
                                                      " (in 'mother.stan', line 74, column 4 to line 78, column 5)",
                                                      " (in 'mother.stan', line 84, column 11 to column 17)",
                                                      " (in 'mother.stan', line 83, column 18 to column 24)",
                                                      " (in 'mother.stan', line 83, column 11 to line 84, column 17)",
                                                      " (in 'mother.stan', line 82, column 13 to column 19)",
                                                      " (in 'mother.stan', line 82, column 6 to line 84, column 17)",
                                                      " (in 'mother.stan', line 81, column 14 to line 85, column 5)",
                                                      " (in 'mother.stan', line 81, column 4 to line 85, column 5)",
                                                      " (in 'mother.stan', line 88, column 24 to column 30)",
                                                      " (in 'mother.stan', line 88, column 14 to column 30)",
                                                      " (in 'mother.stan', line 88, column 4 to column 30)",
                                                      " (in 'mother.stan', line 92, column 22 to column 28)",
                                                      " (in 'mother.stan', line 92, column 6 to column 28)",
                                                      " (in 'mother.stan', line 91, column 14 to line 93, column 5)",
                                                      " (in 'mother.stan', line 91, column 4 to line 93, column 5)",
                                                      " (in 'mother.stan', line 97, column 6 to column 19)",
                                                      " (in 'mother.stan', line 98, column 6 to column 12)",
                                                      " (in 'mother.stan', line 99, column 6 to line 102, column 7)",
                                                      " (in 'mother.stan', line 100, column 8 to column 14)",
                                                      " (in 'mother.stan', line 101, column 8 to column 14)",
                                                      " (in 'mother.stan', line 103, column 6 to line 106, column 7)",
                                                      " (in 'mother.stan', line 104, column 8 to column 14)",
                                                      " (in 'mother.stan', line 105, column 8 to column 17)",
                                                      " (in 'mother.stan', line 107, column 6 to line 113, column 7)",
                                                      " (in 'mother.stan', line 108, column 8 to line 111, column 9)",
                                                      " (in 'mother.stan', line 109, column 10 to column 16)",
                                                      " (in 'mother.stan', line 110, column 10 to column 16)",
                                                      " (in 'mother.stan', line 112, column 8 to column 14)",
                                                      " (in 'mother.stan', line 96, column 14 to line 114, column 5)",
                                                      " (in 'mother.stan', line 96, column 4 to line 114, column 5)",
                                                      " (in 'mother.stan', line 118, column 6 to column 13)",
                                                      " (in 'mother.stan', line 119, column 6 to column 21)",
                                                      " (in 'mother.stan', line 120, column 6 to line 123, column 7)",
                                                      " (in 'mother.stan', line 121, column 8 to column 14)",
                                                      " (in 'mother.stan', line 122, column 8 to column 14)",
                                                      " (in 'mother.stan', line 124, column 6 to line 127, column 7)",
                                                      " (in 'mother.stan', line 125, column 8 to column 16)",
                                                      " (in 'mother.stan', line 126, column 8 to column 17)",
                                                      " (in 'mother.stan', line 117, column 14 to line 128, column 5)",
                                                      " (in 'mother.stan', line 117, column 4 to line 128, column 5)",
                                                      " (in 'mother.stan', line 132, column 6 to column 13)",
                                                      " (in 'mother.stan', line 133, column 6 to column 19)",
                                                      " (in 'mother.stan', line 134, column 6 to line 137, column 7)",
                                                      " (in 'mother.stan', line 135, column 8 to column 14)",
                                                      " (in 'mother.stan', line 136, column 8 to column 14)",
                                                      " (in 'mother.stan', line 138, column 6 to line 141, column 7)",
                                                      " (in 'mother.stan', line 139, column 8 to column 16)",
                                                      " (in 'mother.stan', line 140, column 8 to column 17)",
                                                      " (in 'mother.stan', line 131, column 14 to line 142, column 5)",
                                                      " (in 'mother.stan', line 131, column 4 to line 142, column 5)",
                                                      " (in 'mother.stan', line 146, column 6 to column 13)",
                                                      " (in 'mother.stan', line 147, column 6 to column 23)",
                                                      " (in 'mother.stan', line 148, column 6 to line 151, column 7)",
                                                      " (in 'mother.stan', line 149, column 8 to column 14)",
                                                      " (in 'mother.stan', line 150, column 8 to column 14)",
                                                      " (in 'mother.stan', line 152, column 6 to line 155, column 7)",
                                                      " (in 'mother.stan', line 153, column 8 to column 16)",
                                                      " (in 'mother.stan', line 154, column 8 to column 17)",
                                                      " (in 'mother.stan', line 145, column 14 to line 156, column 5)",
                                                      " (in 'mother.stan', line 145, column 4 to line 156, column 5)",
                                                      " (in 'mother.stan', line 160, column 6 to column 12)",
                                                      " (in 'mother.stan', line 161, column 6 to column 12)",
                                                      " (in 'mother.stan', line 163, column 8 to column 14)",
                                                      " (in 'mother.stan', line 164, column 8 to column 14)",
                                                      " (in 'mother.stan', line 165, column 8 to column 14)",
                                                      " (in 'mother.stan', line 162, column 6 to line 166, column 7)",
                                                      " (in 'mother.stan', line 159, column 14 to line 167, column 5)",
                                                      " (in 'mother.stan', line 159, column 4 to line 167, column 5)",
                                                      " (in 'mother.stan', line 169, column 4 to column 13)",
                                                      " (in 'mother.stan', line 64, column 19 to line 170, column 3)",
                                                      " (in 'mother.stan', line 173, column 4 to column 14)",
                                                      " (in 'mother.stan', line 174, column 4 to column 10)",
                                                      " (in 'mother.stan', line 175, column 4 to column 24)",
                                                      " (in 'mother.stan', line 175, column 18 to column 24)",
                                                      " (in 'mother.stan', line 176, column 4 to column 13)",
                                                      " (in 'mother.stan', line 172, column 19 to line 177, column 3)",
                                                      " (in 'mother.stan', line 180, column 4 to column 26)",
                                                      " (in 'mother.stan', line 179, column 30 to line 181, column 3)",
                                                      " (in 'mother.stan', line 184, column 4 to column 24)",
                                                      " (in 'mother.stan', line 183, column 22 to line 185, column 3)",
                                                      " (in 'mother.stan', line 188, column 4 to column 42)",
                                                      " (in 'mother.stan', line 187, column 21 to line 189, column 3)",
                                                      " (in 'mother.stan', line 192, column 4 to column 18)",
                                                      " (in 'mother.stan', line 193, column 4 to column 19)",
                                                      " (in 'mother.stan', line 194, column 4 to column 27)",
                                                      " (in 'mother.stan', line 195, column 4 to column 40)",
                                                      " (in 'mother.stan', line 197, column 6 to column 81)",
                                                      " (in 'mother.stan', line 196, column 4 to line 197, column 81)",
                                                      " (in 'mother.stan', line 199, column 6 to column 81)",
                                                      " (in 'mother.stan', line 198, column 4 to line 199, column 81)",
                                                      " (in 'mother.stan', line 200, column 4 to column 32)",
                                                      " (in 'mother.stan', line 191, column 59 to line 201, column 3)",
                                                      " (in 'mother.stan', line 205, column 4 to column 22)",
                                                      " (in 'mother.stan', line 204, column 52 to line 206, column 3)"};

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo(const T0__& n, std::ostream* pstream__) ;

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo(const T0__& n, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 187;
    if (logical_eq(n, 0)) {
      current_statement__ = 186;
      return 1;
    } 
    current_statement__ = 188;
    return (n * foo((n - 1), pstream__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_functor__ {
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
operator()(const T0__& n, std::ostream* pstream__)  const 
{
return foo(n, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<T3__>& x,
    const std::vector<T4__>& x_int, std::ostream* pstream__) ;

template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type>
sho(const T0__& t, const std::vector<T1__>& y,
    const std::vector<T2__>& theta, const std::vector<T3__>& x,
    const std::vector<T4__>& x_int, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<local_scalar_t__> dydt;
    dydt = std::vector<local_scalar_t__>(2, 0);
    
    current_statement__ = 192;
    assign(dydt, cons_list(index_uni(1), nil_index_list()), rvalue(y, cons_list(index_uni(2), nil_index_list()), "pretty printed e"), "assigning variable dydt[(1 - 1)]");
    current_statement__ = 193;
    assign(dydt, cons_list(index_uni(2), nil_index_list()), (-rvalue(y, cons_list(index_uni(1), nil_index_list()), "pretty printed e") - (rvalue(theta, cons_list(index_uni(1), nil_index_list()), "pretty printed e") * rvalue(y, cons_list(index_uni(2), nil_index_list()), "pretty printed e"))), "assigning variable dydt[(2 - 1)]");
    current_statement__ = 194;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF sho") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct sho_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type>
operator()(const T0__& t, const std::vector<T1__>& y,
           const std::vector<T2__>& theta, const std::vector<T3__>& x,
           const std::vector<T4__>& x_int, std::ostream* pstream__)  const 
{
return sho(t, y, theta, x, x_int, pstream__);
}
};

double
foo_bar0(std::ostream* pstream__) {
  using local_scalar_t__ = double;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 196;
    return 0.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_bar0") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar0_functor__ {
double
operator()(std::ostream* pstream__)  const 
{
return foo_bar0(pstream__);
}
};

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo_bar1(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 198;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_bar1") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar1_functor__ {
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return foo_bar1(x, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
foo_bar2(const T0__& x, const T1__& y, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 200;
    return 2.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_bar2") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_bar2_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& x, const T1__& y, std::ostream* pstream__)  const 
{
return foo_bar2(x, y, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
foo_lpmf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 202;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_lpmf") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lpmf_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lpmf(y, lambda, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
foo_lcdf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 204;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_lcdf") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lcdf_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lcdf(y, lambda, pstream__);
}
};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
foo_lccdf(const T0__& y, const T1__& lambda, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 206;
    return 1.0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_lccdf") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lccdf_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& y, const T1__& lambda, std::ostream* pstream__)  const 
{
return foo_lccdf(y, lambda, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
void
unit_normal_lp(const T0__& u, const T1__& lp__, const T2__& lp_accum__,
               std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 208;
    lp_accum__.add(normal_log<false>(u, 0, 1));
    current_statement__ = 209;
    lp_accum__.add(uniform_log<propto__>(u, -100, 100));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF unit_normal_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct unit_normal_lp_functor__ {
template <typename T0__, typename T1__, typename T2__>
void
operator()(const T0__& u, const T1__& lp__, const T2__& lp_accum__,
           std::ostream* pstream__)  const 
{
return unit_normal_lp(u, lp__, lp_accum__, pstream__);
}
};

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo_1(const T0__& a, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 212;
    while (1) {
      break;
    }
    current_statement__ = 214;
    while (0) {
      continue;
    }
    current_statement__ = 216;
    for (size_t i = 1; i <= 10; ++i) { break;}
    current_statement__ = 218;
    for (size_t i = 1; i <= 10; ++i) { continue;}
    current_statement__ = 223;
    while (1) {
      int b;
      
      current_statement__ = 220;
      b = 5;
      break;
    }
    current_statement__ = 230;
    while (1) {
      current_statement__ = 228;
      if (0) {
        break;
      } else {
        current_statement__ = 226;
        if (1) {
          break;
        } else {
          break;
        }
      }
    }
    current_statement__ = 233;
    while (1) {
      current_statement__ = 232;
      while (0) {
        break;
      }
    }
    current_statement__ = 237;
    while (1) {
      current_statement__ = 235;
      for (size_t i = 1; i <= 10; ++i) { break;}
    }
    current_statement__ = 252;
    while (1) {
      std::vector<std::vector<int>> vs;
      vs = std::vector<std::vector<int>>(2, std::vector<int>(3, 0));
      
      int z;
      
      current_statement__ = 240;
      for (size_t sym49__ = 1; sym49__ <= stan::length(vs); ++sym49__) {
        std::vector<int> v;
        current_statement__ = 240;
        v = rvalue(vs, cons_list(index_uni(sym49__), nil_index_list()), "pretty printed e");
        current_statement__ = 241;
        z = 0;
        break;}
      current_statement__ = 243;
      for (size_t sym50__ = 1; sym50__ <= stan::length(vs); ++sym50__) {
        std::vector<int> v;
        current_statement__ = 243;
        v = rvalue(vs, cons_list(index_uni(sym50__), nil_index_list()), "pretty printed e");
        current_statement__ = 244;
        z = 0;
        continue;}
      current_statement__ = 246;
      for (size_t sym51__ = 1; sym51__ <= stan::length(vs); ++sym51__) {
        std::vector<int> v;
        current_statement__ = 246;
        v = rvalue(vs, cons_list(index_uni(sym51__), nil_index_list()), "pretty printed e");
        current_statement__ = 247;
        for (size_t sym52__ = 1; sym52__ <= stan::length(v); ++sym52__) {
          int vv;
          current_statement__ = 247;
          vv = rvalue(v, cons_list(index_uni(sym52__), nil_index_list()), "pretty printed e");
          current_statement__ = 248;
          z = 0;
          break;}
        current_statement__ = 250;
        z = 1;}
    }
    current_statement__ = 262;
    while (1) {
      local_scalar_t__ z;
      
      Eigen::Matrix<local_scalar_t__, -1, -1> vs;
      vs = Eigen::Matrix<local_scalar_t__, -1, -1>(2, 3);
      
      current_statement__ = 255;
      for (size_t sym53__ = 1; sym53__ <= stan::length(vs); ++sym53__) {
        double v;
        current_statement__ = 255;
        v = rvalue(vs, cons_list(index_uni(sym53__), nil_index_list()), "pretty printed e");
        current_statement__ = 256;
        z = 0;
        break;}
      current_statement__ = 258;
      for (size_t sym54__ = 1; sym54__ <= stan::length(vs); ++sym54__) {
        double v;
        current_statement__ = 258;
        v = rvalue(vs, cons_list(index_uni(sym54__), nil_index_list()), "pretty printed e");
        current_statement__ = 259;
        z = 3.1;
        continue;}
    }
    current_statement__ = 272;
    while (1) {
      local_scalar_t__ z;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> vs;
      vs = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      
      current_statement__ = 265;
      for (size_t sym55__ = 1; sym55__ <= stan::length(vs); ++sym55__) {
        double v;
        current_statement__ = 265;
        v = rvalue(vs, cons_list(index_uni(sym55__), nil_index_list()), "pretty printed e");
        current_statement__ = 266;
        z = 0;
        break;}
      current_statement__ = 268;
      for (size_t sym56__ = 1; sym56__ <= stan::length(vs); ++sym56__) {
        double v;
        current_statement__ = 268;
        v = rvalue(vs, cons_list(index_uni(sym56__), nil_index_list()), "pretty printed e");
        current_statement__ = 269;
        z = 3.2;
        continue;}
    }
    current_statement__ = 282;
    while (1) {
      local_scalar_t__ z;
      
      Eigen::Matrix<local_scalar_t__, 1, -1> vs;
      vs = Eigen::Matrix<local_scalar_t__, 1, -1>(2);
      
      current_statement__ = 275;
      for (size_t sym57__ = 1; sym57__ <= stan::length(vs); ++sym57__) {
        double v;
        current_statement__ = 275;
        v = rvalue(vs, cons_list(index_uni(sym57__), nil_index_list()), "pretty printed e");
        current_statement__ = 276;
        z = 0;
        break;}
      current_statement__ = 278;
      for (size_t sym58__ = 1; sym58__ <= stan::length(vs); ++sym58__) {
        double v;
        current_statement__ = 278;
        v = rvalue(vs, cons_list(index_uni(sym58__), nil_index_list()), "pretty printed e");
        current_statement__ = 279;
        z = 3.3;
        continue;}
    }
    current_statement__ = 290;
    while (1) {
      int b;
      
      current_statement__ = 284;
      b = 5;
      {
        int c;
        
        current_statement__ = 286;
        c = 6;
        break;
      }
    }
    current_statement__ = 291;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_1") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_1_functor__ {
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
operator()(const T0__& a, std::ostream* pstream__)  const 
{
return foo_1(a, pstream__);
}
};

template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
foo_2(const T0__& a, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<int> vs;
    vs = std::vector<int>(2, 0);
    
    int y;
    
    current_statement__ = 295;
    for (size_t sym59__ = 1; sym59__ <= stan::length(vs); ++sym59__) {
      int v;
      current_statement__ = 295;
      v = rvalue(vs, cons_list(index_uni(sym59__), nil_index_list()), "pretty printed e");
      current_statement__ = 296;
      y = v;}
    current_statement__ = 297;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_2") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_2_functor__ {
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
operator()(const T0__& a, std::ostream* pstream__)  const 
{
return foo_2(a, pstream__);
}
};

template <typename T0__, typename T1__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__>::type>
foo_3(const T0__& t, const T1__& n, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 299;
    return rep_array(t, n);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_3") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_3_functor__ {
template <typename T0__, typename T1__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__>::type>
operator()(const T0__& t, const T1__& n, std::ostream* pstream__)  const 
{
return foo_3(t, n, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
foo_lp(const T0__& x, const T1__& lp__, const T2__& lp_accum__,
       std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 301;
    return (x + get_lp(lp__, lp_accum__));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_lp") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_lp_functor__ {
template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
operator()(const T0__& x, const T1__& lp__, const T2__& lp_accum__,
           std::ostream* pstream__)  const 
{
return foo_lp(x, lp__, lp_accum__, pstream__);
}
};

template <typename T0__>
void
foo_4(const T0__& x, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 303;
    std::stringstream errmsg_stream__;
    errmsg_stream__ << "user-specified rejection";
    errmsg_stream__ << x;
    throw std::domain_error(errmsg_stream__.str());
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_4") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_4_functor__ {
template <typename T0__>
void
operator()(const T0__& x, std::ostream* pstream__)  const 
{
return foo_4(x, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
relative_diff(const T0__& x, const T1__& y, const T2__& max_,
              const T3__& min_, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ abs_diff;
    
    local_scalar_t__ avg_scale;
    
    current_statement__ = 307;
    abs_diff = stan::math::fabs((x - y));
    current_statement__ = 308;
    avg_scale = ((stan::math::fabs(x) + stan::math::fabs(y)) / 2);
    current_statement__ = 310;
    if (logical_gt((abs_diff / avg_scale), max_)) {
      current_statement__ = 309;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "user-specified rejection, difference above ";
      errmsg_stream__ << max_;
      errmsg_stream__ << " x:";
      errmsg_stream__ << x;
      errmsg_stream__ << " y:";
      errmsg_stream__ << y;
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 312;
    if (logical_lt((abs_diff / avg_scale), min_)) {
      current_statement__ = 311;
      std::stringstream errmsg_stream__;
      errmsg_stream__ << "user-specified rejection, difference below ";
      errmsg_stream__ << min_;
      errmsg_stream__ << " x:";
      errmsg_stream__ << x;
      errmsg_stream__ << " y:";
      errmsg_stream__ << y;
      throw std::domain_error(errmsg_stream__.str());
    } 
    current_statement__ = 313;
    return (abs_diff / avg_scale);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF relative_diff") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct relative_diff_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
operator()(const T0__& x, const T1__& y, const T2__& max_, const T3__& min_,
           std::ostream* pstream__)  const 
{
return relative_diff(x, y, max_, min_, pstream__);
}
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, -1, 1>
foo_5(const Eigen::Matrix<T0__, -1, 1>& shared_params,
      const Eigen::Matrix<T1__, -1, 1>& job_params,
      const std::vector<T2__>& data_r, const std::vector<T3__>& data_i,
      std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 315;
    return transpose(stan::math::to_row_vector({1, 2, 3}));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF foo_5") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct foo_5_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, -1, 1>
operator()(const Eigen::Matrix<T0__, -1, 1>& shared_params,
           const Eigen::Matrix<T1__, -1, 1>& job_params,
           const std::vector<T2__>& data_r, const std::vector<T3__>& data_i,
           std::ostream* pstream__)  const 
{
return foo_5(shared_params, job_params, data_r, data_i, pstream__);
}
};

class mother_model : public prob_grad {

 private:
  int pos__;
  int N;
  int M;
  int K;
  std::vector<int> d_int_1d_ar;
  std::vector<std::vector<std::vector<int>>> d_int_3d_ar;
  double J;
  std::vector<double> d_real_1d_ar;
  std::vector<std::vector<std::vector<double>>> d_real_3d_ar;
  Eigen::Matrix<double, -1, 1> d_vec;
  std::vector<Eigen::Matrix<double, -1, 1>> d_1d_vec;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_vec;
  Eigen::Matrix<double, 1, -1> d_row_vec;
  std::vector<Eigen::Matrix<double, 1, -1>> d_1d_row_vec;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> d_3d_row_vec;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> d_ar_mat;
  Eigen::Matrix<double, -1, 1> d_simplex;
  std::vector<Eigen::Matrix<double, -1, 1>> d_1d_simplex;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> d_3d_simplex;
  Eigen::Matrix<double, -1, -1> d_cfcov_54;
  Eigen::Matrix<double, -1, -1> d_cfcov_33;
  std::vector<Eigen::Matrix<double, -1, -1>> d_cfcov_33_ar;
  int td_a;
  double td_b;
  double td_c;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> td_ar_mat;
  Eigen::Matrix<double, -1, 1> td_simplex;
  std::vector<Eigen::Matrix<double, -1, 1>> td_1d_simplex;
  std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> td_3d_simplex;
  Eigen::Matrix<double, -1, -1> td_cfcov_54;
  Eigen::Matrix<double, -1, -1> td_cfcov_33;
 
 public:
  ~mother_model() { }
  
  static std::string model_name() { return "mother_model"; }
  
  mother_model(stan::io::var_context& context__,
               unsigned int random_seed__ = 0,
               std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "mother_model_namespace::mother_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      
      current_statement__ = 122;
      N = context__.vals_i("N")[(1 - 1)];
      
      current_statement__ = 123;
      M = context__.vals_i("M")[(1 - 1)];
      
      current_statement__ = 124;
      K = context__.vals_i("K")[(1 - 1)];
      d_int_1d_ar = std::vector<int>(N, 0);
      
      current_statement__ = 125;
      pos__ = 1;
      current_statement__ = 125;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 125;
        assign(d_int_1d_ar, cons_list(index_uni(sym1__), nil_index_list()), 
               context__.vals_i("d_int_1d_ar")[(pos__ - 1)], "assigning variable d_int_1d_ar[(sym1__ - 1)]");
        current_statement__ = 125;
        pos__ = (pos__ + 1);}
      d_int_3d_ar = std::vector<std::vector<std::vector<int>>>(N, std::vector<std::vector<int>>(M, std::vector<int>(K, 0)));
      
      current_statement__ = 126;
      pos__ = 1;
      current_statement__ = 126;
      for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
        current_statement__ = 126;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 126;
          for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
            current_statement__ = 126;
            assign(d_int_3d_ar, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list()))), 
                   context__.vals_i("d_int_3d_ar")[(pos__ - 1)], "assigning variable d_int_3d_ar[(sym1__ - 1), (sym2__ - 1), (sym3__ - 1)]");
            current_statement__ = 126;
            pos__ = (pos__ + 1);}}}
      
      current_statement__ = 127;
      J = context__.vals_r("J")[(1 - 1)];
      d_real_1d_ar = std::vector<double>(N, 0);
      
      current_statement__ = 128;
      pos__ = 1;
      current_statement__ = 128;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 128;
        assign(d_real_1d_ar, cons_list(index_uni(sym1__), nil_index_list()), 
               context__.vals_r("d_real_1d_ar")[(pos__ - 1)], "assigning variable d_real_1d_ar[(sym1__ - 1)]");
        current_statement__ = 128;
        pos__ = (pos__ + 1);}
      d_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      current_statement__ = 129;
      pos__ = 1;
      current_statement__ = 129;
      for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
        current_statement__ = 129;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 129;
          for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
            current_statement__ = 129;
            assign(d_real_3d_ar, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list()))), 
                   context__.vals_r("d_real_3d_ar")[(pos__ - 1)], "assigning variable d_real_3d_ar[(sym1__ - 1), (sym2__ - 1), (sym3__ - 1)]");
            current_statement__ = 129;
            pos__ = (pos__ + 1);}}}
      d_vec = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 130;
      pos__ = 1;
      current_statement__ = 130;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 130;
        assign(d_vec, cons_list(index_uni(sym1__), nil_index_list()), 
               context__.vals_r("d_vec")[(pos__ - 1)], "assigning variable d_vec[(sym1__ - 1)]");
        current_statement__ = 130;
        pos__ = (pos__ + 1);}
      d_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 131;
      pos__ = 1;
      current_statement__ = 131;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 131;
        for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 131;
          assign(d_1d_vec, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), 
                 context__.vals_r("d_1d_vec")[(pos__ - 1)], "assigning variable d_1d_vec[(sym1__ - 1), (sym2__ - 1)]");
          current_statement__ = 131;
          pos__ = (pos__ + 1);}}
      d_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 132;
      pos__ = 1;
      current_statement__ = 132;
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        current_statement__ = 132;
        for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
          current_statement__ = 132;
          for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 132;
            for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
              current_statement__ = 132;
              assign(d_3d_vec, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), 
                     context__.vals_r("d_3d_vec")[(pos__ - 1)], "assigning variable d_3d_vec[(sym1__ - 1), (sym2__ - 1), (sym3__ - 1),\n                            (sym4__ - 1)]");
              current_statement__ = 132;
              pos__ = (pos__ + 1);}}}}
      d_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      current_statement__ = 133;
      pos__ = 1;
      current_statement__ = 133;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 133;
        assign(d_row_vec, cons_list(index_uni(sym1__), nil_index_list()), 
               context__.vals_r("d_row_vec")[(pos__ - 1)], "assigning variable d_row_vec[(sym1__ - 1)]");
        current_statement__ = 133;
        pos__ = (pos__ + 1);}
      d_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      current_statement__ = 134;
      pos__ = 1;
      current_statement__ = 134;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 134;
        for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 134;
          assign(d_1d_row_vec, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), 
                 context__.vals_r("d_1d_row_vec")[(pos__ - 1)], "assigning variable d_1d_row_vec[(sym1__ - 1), (sym2__ - 1)]");
          current_statement__ = 134;
          pos__ = (pos__ + 1);}}
      d_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      current_statement__ = 135;
      pos__ = 1;
      current_statement__ = 135;
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        current_statement__ = 135;
        for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
          current_statement__ = 135;
          for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 135;
            for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
              current_statement__ = 135;
              assign(d_3d_row_vec, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), 
                     context__.vals_r("d_3d_row_vec")[(pos__ - 1)], "assigning variable d_3d_row_vec[(sym1__ - 1), (sym2__ - 1), (sym3__ - 1),\n                                (sym4__ - 1)]");
              current_statement__ = 135;
              pos__ = (pos__ + 1);}}}}
      d_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      current_statement__ = 136;
      pos__ = 1;
      current_statement__ = 136;
      for (size_t sym4__ = 1; sym4__ <= 3; ++sym4__) {
        current_statement__ = 136;
        for (size_t sym3__ = 1; sym3__ <= 2; ++sym3__) {
          current_statement__ = 136;
          for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
            current_statement__ = 136;
            for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
              current_statement__ = 136;
              assign(d_ar_mat, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), 
                     context__.vals_r("d_ar_mat")[(pos__ - 1)], "assigning variable d_ar_mat[(sym1__ - 1), (sym2__ - 1), (sym3__ - 1),\n                            (sym4__ - 1)]");
              current_statement__ = 136;
              pos__ = (pos__ + 1);}}}}
      d_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 137;
      pos__ = 1;
      current_statement__ = 137;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 137;
        assign(d_simplex, cons_list(index_uni(sym2__), nil_index_list()), 
               context__.vals_r("d_simplex")[(pos__ - 1)], "assigning variable d_simplex[(sym2__ - 1)]");
        current_statement__ = 137;
        pos__ = (pos__ + 1);}
      d_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 138;
      pos__ = 1;
      current_statement__ = 138;
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        current_statement__ = 138;
        for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
          current_statement__ = 138;
          assign(d_1d_simplex, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())), 
                 context__.vals_r("d_1d_simplex")[(pos__ - 1)], "assigning variable d_1d_simplex[(sym3__ - 1), (sym4__ - 1)]");
          current_statement__ = 138;
          pos__ = (pos__ + 1);}}
      d_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 139;
      pos__ = 1;
      current_statement__ = 139;
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        current_statement__ = 139;
        for (size_t sym6__ = 1; sym6__ <= K; ++sym6__) {
          current_statement__ = 139;
          for (size_t sym5__ = 1; sym5__ <= M; ++sym5__) {
            current_statement__ = 139;
            for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
              current_statement__ = 139;
              assign(d_3d_simplex, cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), cons_list(index_uni(sym7__), nil_index_list())))), 
                     context__.vals_r("d_3d_simplex")[(pos__ - 1)], "assigning variable d_3d_simplex[(sym4__ - 1), (sym5__ - 1), (sym6__ - 1),\n                                (sym7__ - 1)]");
              current_statement__ = 139;
              pos__ = (pos__ + 1);}}}}
      d_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      current_statement__ = 140;
      pos__ = 1;
      current_statement__ = 140;
      for (size_t sym6__ = 1; sym6__ <= 4; ++sym6__) {
        current_statement__ = 140;
        for (size_t sym5__ = 1; sym5__ <= 5; ++sym5__) {
          current_statement__ = 140;
          assign(d_cfcov_54, cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), nil_index_list())), 
                 context__.vals_r("d_cfcov_54")[(pos__ - 1)], "assigning variable d_cfcov_54[(sym5__ - 1), (sym6__ - 1)]");
          current_statement__ = 140;
          pos__ = (pos__ + 1);}}
      d_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 141;
      pos__ = 1;
      current_statement__ = 141;
      for (size_t sym7__ = 1; sym7__ <= 3; ++sym7__) {
        current_statement__ = 141;
        for (size_t sym6__ = 1; sym6__ <= 3; ++sym6__) {
          current_statement__ = 141;
          assign(d_cfcov_33, cons_list(index_uni(sym6__), cons_list(index_uni(sym7__), nil_index_list())), 
                 context__.vals_r("d_cfcov_33")[(pos__ - 1)], "assigning variable d_cfcov_33[(sym6__ - 1), (sym7__ - 1)]");
          current_statement__ = 141;
          pos__ = (pos__ + 1);}}
      d_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      current_statement__ = 142;
      pos__ = 1;
      current_statement__ = 142;
      for (size_t sym9__ = 1; sym9__ <= 3; ++sym9__) {
        current_statement__ = 142;
        for (size_t sym8__ = 1; sym8__ <= 3; ++sym8__) {
          current_statement__ = 142;
          for (size_t sym7__ = 1; sym7__ <= K; ++sym7__) {
            current_statement__ = 142;
            assign(d_cfcov_33_ar, cons_list(index_uni(sym7__), cons_list(index_uni(sym8__), cons_list(index_uni(sym9__), nil_index_list()))), 
                   context__.vals_r("d_cfcov_33_ar")[(pos__ - 1)], "assigning variable d_cfcov_33_ar[(sym7__ - 1), (sym8__ - 1), (sym9__ - 1)]");
            current_statement__ = 142;
            pos__ = (pos__ + 1);}}}
      
      current_statement__ = 143;
      td_a = N;
      
      current_statement__ = 144;
      td_b = (N * J);
      
      current_statement__ = 145;
      td_c = foo_bar1(td_b, pstream__);
      td_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      td_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      td_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      td_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      td_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 5);
      
      td_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 160;
      for (size_t i = 1; i <= 2; ++i) {
        current_statement__ = 158;
        for (size_t j = 1; j <= 3; ++j) {
          current_statement__ = 156;
          for (size_t m = 1; m <= 4; ++m) {
            current_statement__ = 154;
            for (size_t n = 1; n <= 5; ++n) {
              current_statement__ = 152;
              assign(td_ar_mat, cons_list(index_uni(m), cons_list(index_uni(n), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())))), 0.4, "assigning variable td_ar_mat[(m - 1), (n - 1), (i - 1), (j - 1)]");
            }}}}
      current_statement__ = 171;
      for (size_t i = 1; i <= N; ++i) {
        current_statement__ = 161;
        assign(td_simplex, cons_list(index_uni(i), nil_index_list()), (1.0 / N), "assigning variable td_simplex[(i - 1)]");
        current_statement__ = 169;
        for (size_t n = 1; n <= N; ++n) {
          current_statement__ = 162;
          assign(td_1d_simplex, cons_list(index_uni(n), cons_list(index_uni(i), nil_index_list())), (1.0 / N), "assigning variable td_1d_simplex[(n - 1), (i - 1)]");
          current_statement__ = 167;
          for (size_t m = 1; m <= M; ++m) {
            current_statement__ = 165;
            for (size_t k = 1; k <= K; ++k) {
              current_statement__ = 163;
              assign(td_3d_simplex, cons_list(index_uni(n), cons_list(index_uni(m), cons_list(index_uni(k), cons_list(index_uni(i), nil_index_list())))), (1.0 / N), "assigning variable td_3d_simplex[(n - 1), (m - 1), (k - 1), (i - 1)]");
            }}}}
      current_statement__ = 177;
      for (size_t i = 1; i <= 4; ++i) {
        current_statement__ = 175;
        for (size_t j = 1; j <= 5; ++j) {
          Eigen::Matrix<double, -1, -1> l_mat;
          l_mat = Eigen::Matrix<double, -1, -1>(2, 3);
          
          current_statement__ = 172;
          assign(l_mat, nil_index_list(), rvalue(d_ar_mat, cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())), "pretty printed e"), "assigning variable l_mat");
          current_statement__ = 173;
          if (pstream__) {
            stan_print(pstream__, "ar dim1: ");
            stan_print(pstream__, i);
            stan_print(pstream__, " ar dim2: ");
            stan_print(pstream__, j);
            stan_print(pstream__, " matrix: ");
            stan_print(pstream__, l_mat);
            stan_print(pstream__, "\n");
          }}}
      current_statement__ = 178;
      assign(td_cfcov_54, nil_index_list(), diag_matrix(rep_vector(1,
                                                                   rows(
                                                                   stan::model::deep_copy(
                                                                   td_cfcov_54)))), "assigning variable td_cfcov_54");
      current_statement__ = 179;
      assign(td_cfcov_33, nil_index_list(), diag_matrix(rep_vector(1,
                                                                   rows(
                                                                   stan::model::deep_copy(
                                                                   td_cfcov_33)))), "assigning variable td_cfcov_33");
      {
        double z;
        
        Eigen::Matrix<double, 1, -1> blocked_tdata_vs;
        blocked_tdata_vs = Eigen::Matrix<double, 1, -1>(2);
        
        current_statement__ = 182;
        for (size_t sym12__ = 1; sym12__ <= stan::length(blocked_tdata_vs);
             ++sym12__) {
          double v;
          current_statement__ = 182;
          v = rvalue(blocked_tdata_vs, cons_list(index_uni(sym12__), nil_index_list()), "pretty printed e");
          current_statement__ = 183;
          z = 0;}
      }
      current_statement__ = 122;
      current_statement__ = 122;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 123;
      current_statement__ = 123;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 124;
      current_statement__ = 124;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 124;
      current_statement__ = 124;
      check_less_or_equal(function__, "K", K, (N * M));
      current_statement__ = 125;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 125;
        current_statement__ = 125;
        check_less_or_equal(function__, "d_int_1d_ar[sym1__]",
                            rvalue(d_int_1d_ar, cons_list(index_uni(sym1__), nil_index_list()), "pretty printed e"),
                            N);}
      current_statement__ = 126;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 126;
        for (size_t sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 126;
          for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
            current_statement__ = 126;
            current_statement__ = 126;
            check_less_or_equal(function__,
                                "d_int_3d_ar[sym1__, sym2__, sym3__]",
                                rvalue(d_int_3d_ar, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list()))), "pretty printed e"),
                                N);}}}
      current_statement__ = 127;
      current_statement__ = 127;
      check_greater_or_equal(function__, "J", J, -2.0);
      current_statement__ = 127;
      current_statement__ = 127;
      check_less_or_equal(function__, "J", J, 2.0);
      current_statement__ = 136;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 136;
        for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 136;
          current_statement__ = 136;
          check_greater_or_equal(function__, "d_ar_mat[sym1__, sym2__]",
                                 rvalue(d_ar_mat, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), "pretty printed e"),
                                 0);}}
      current_statement__ = 136;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 136;
        for (size_t sym2__ = 1; sym2__ <= 5; ++sym2__) {
          current_statement__ = 136;
          current_statement__ = 136;
          check_less_or_equal(function__, "d_ar_mat[sym1__, sym2__]",
                              rvalue(d_ar_mat, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), "pretty printed e"),
                              1);}}
      current_statement__ = 137;
      current_statement__ = 137;
      check_simplex(function__, "d_simplex", d_simplex);
      current_statement__ = 138;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 138;
        current_statement__ = 138;
        check_simplex(function__, "d_1d_simplex[sym2__]",
                      rvalue(d_1d_simplex, cons_list(index_uni(sym2__), nil_index_list()), "pretty printed e"));
      }
      current_statement__ = 139;
      for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
        current_statement__ = 139;
        for (size_t sym4__ = 1; sym4__ <= M; ++sym4__) {
          current_statement__ = 139;
          for (size_t sym5__ = 1; sym5__ <= K; ++sym5__) {
            current_statement__ = 139;
            current_statement__ = 139;
            check_simplex(function__, "d_3d_simplex[sym3__, sym4__, sym5__]",
                          rvalue(d_3d_simplex, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list()))), "pretty printed e"));
          }}}
      current_statement__ = 140;
      current_statement__ = 140;
      check_cholesky_factor(function__, "d_cfcov_54", d_cfcov_54);
      current_statement__ = 141;
      current_statement__ = 141;
      check_cholesky_factor(function__, "d_cfcov_33", d_cfcov_33);
      current_statement__ = 142;
      for (size_t sym6__ = 1; sym6__ <= K; ++sym6__) {
        current_statement__ = 142;
        current_statement__ = 142;
        check_cholesky_factor(function__, "d_cfcov_33_ar[sym6__]",
                              rvalue(d_cfcov_33_ar, cons_list(index_uni(sym6__), nil_index_list()), "pretty printed e"));
      }
      current_statement__ = 146;
      for (size_t sym7__ = 1; sym7__ <= 4; ++sym7__) {
        current_statement__ = 146;
        for (size_t sym8__ = 1; sym8__ <= 5; ++sym8__) {
          current_statement__ = 146;
          current_statement__ = 146;
          check_greater_or_equal(function__, "td_ar_mat[sym7__, sym8__]",
                                 rvalue(td_ar_mat, cons_list(index_uni(sym7__), cons_list(index_uni(sym8__), nil_index_list())), "pretty printed e"),
                                 0);}}
      current_statement__ = 146;
      for (size_t sym7__ = 1; sym7__ <= 4; ++sym7__) {
        current_statement__ = 146;
        for (size_t sym8__ = 1; sym8__ <= 5; ++sym8__) {
          current_statement__ = 146;
          current_statement__ = 146;
          check_less_or_equal(function__, "td_ar_mat[sym7__, sym8__]",
                              rvalue(td_ar_mat, cons_list(index_uni(sym7__), cons_list(index_uni(sym8__), nil_index_list())), "pretty printed e"),
                              1);}}
      current_statement__ = 147;
      current_statement__ = 147;
      check_simplex(function__, "td_simplex", td_simplex);
      current_statement__ = 148;
      for (size_t sym8__ = 1; sym8__ <= N; ++sym8__) {
        current_statement__ = 148;
        current_statement__ = 148;
        check_simplex(function__, "td_1d_simplex[sym8__]",
                      rvalue(td_1d_simplex, cons_list(index_uni(sym8__), nil_index_list()), "pretty printed e"));
      }
      current_statement__ = 149;
      for (size_t sym9__ = 1; sym9__ <= N; ++sym9__) {
        current_statement__ = 149;
        for (size_t sym10__ = 1; sym10__ <= M; ++sym10__) {
          current_statement__ = 149;
          for (size_t sym11__ = 1; sym11__ <= K; ++sym11__) {
            current_statement__ = 149;
            current_statement__ = 149;
            check_simplex(function__,
                          "td_3d_simplex[sym9__, sym10__, sym11__]",
                          rvalue(td_3d_simplex, cons_list(index_uni(sym9__), cons_list(index_uni(sym10__), cons_list(index_uni(sym11__), nil_index_list()))), "pretty printed e"));
          }}}
      current_statement__ = 150;
      current_statement__ = 150;
      check_cholesky_factor(function__, "td_cfcov_54", td_cfcov_54);
      current_statement__ = 151;
      current_statement__ = 151;
      check_cholesky_factor(function__, "td_cfcov_33", td_cfcov_33);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += N;
    num_params_r__ += N * M * K;
    num_params_r__ += N;
    num_params_r__ += N * N;
    num_params_r__ += N * M * K * N;
    num_params_r__ += N;
    num_params_r__ += N * N;
    num_params_r__ += N * M * K * N;
    num_params_r__ += 4 * 5 * 2 * 3;
    num_params_r__ += (N - 1);
    num_params_r__ += N * (N - 1);
    num_params_r__ += N * M * K * (N - 1);
    num_params_r__ += ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4));
    num_params_r__ += ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3));
    num_params_r__ += K * ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3));
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "mother_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ p_real;
      
      current_statement__ = 2;
      p_real = in__.scalar();
      std::vector<local_scalar_t__> p_real_1d_ar;
      p_real_1d_ar = std::vector<local_scalar_t__>(N, 0);
      
      current_statement__ = 3;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 3;
        assign(p_real_1d_ar, cons_list(index_uni(sym19__), nil_index_list()), in__.scalar(
               ), "assigning variable p_real_1d_ar[(sym19__ - 1)]");}
      current_statement__ = 3;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(p_real_1d_ar, cons_list(index_uni(sym19__), nil_index_list()), lb_constrain(
                 rvalue(p_real_1d_ar, cons_list(index_uni(sym19__), nil_index_list()), "pretty printed e"),
                 0, lp__), "assigning variable p_real_1d_ar[(sym19__ - 1)]");
        } else {
          current_statement__ = 3;
          assign(p_real_1d_ar, cons_list(index_uni(sym19__), nil_index_list()), lb_constrain(
                 rvalue(p_real_1d_ar, cons_list(index_uni(sym19__), nil_index_list()), "pretty printed e"),
                 0), "assigning variable p_real_1d_ar[(sym19__ - 1)]");
        }}
      std::vector<std::vector<std::vector<local_scalar_t__>>> p_real_3d_ar;
      p_real_3d_ar = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(M, std::vector<local_scalar_t__>(K, 0)));
      
      current_statement__ = 4;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 4;
        for (size_t sym20__ = 1; sym20__ <= M; ++sym20__) {
          current_statement__ = 4;
          for (size_t sym21__ = 1; sym21__ <= K; ++sym21__) {
            current_statement__ = 4;
            assign(p_real_3d_ar, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), nil_index_list()))), in__.scalar(
                   ), "assigning variable p_real_3d_ar[(sym19__ - 1), (sym20__ - 1), (sym21__ - 1)]");
          }}}
      current_statement__ = 4;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 4;
        for (size_t sym20__ = 1; sym20__ <= M; ++sym20__) {
          current_statement__ = 4;
          for (size_t sym21__ = 1; sym21__ <= K; ++sym21__) {
            current_statement__ = 4;
            if (jacobian__) {
              current_statement__ = 4;
              assign(p_real_3d_ar, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), nil_index_list()))), lb_constrain(
                     rvalue(p_real_3d_ar, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), nil_index_list()))), "pretty printed e"),
                     0, lp__), "assigning variable p_real_3d_ar[(sym19__ - 1), (sym20__ - 1), (sym21__ - 1)]");
            } else {
              current_statement__ = 4;
              assign(p_real_3d_ar, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), nil_index_list()))), lb_constrain(
                     rvalue(p_real_3d_ar, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), nil_index_list()))), "pretty printed e"),
                     0), "assigning variable p_real_3d_ar[(sym19__ - 1), (sym20__ - 1), (sym21__ - 1)]");
            }}}}
      Eigen::Matrix<local_scalar_t__, -1, 1> p_vec;
      p_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      current_statement__ = 5;
      p_vec = in__.vector(N);
      current_statement__ = 5;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(p_vec, cons_list(index_uni(sym19__), nil_index_list()), lb_constrain(
                 rvalue(p_vec, cons_list(index_uni(sym19__), nil_index_list()), "pretty printed e"),
                 0, lp__), "assigning variable p_vec[(sym19__ - 1)]");
        } else {
          current_statement__ = 5;
          assign(p_vec, cons_list(index_uni(sym19__), nil_index_list()), lb_constrain(
                 rvalue(p_vec, cons_list(index_uni(sym19__), nil_index_list()), "pretty printed e"),
                 0), "assigning variable p_vec[(sym19__ - 1)]");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_vec;
      p_1d_vec = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = 6;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 6;
        assign(p_1d_vec, cons_list(index_uni(sym19__), nil_index_list()), in__.vector(
               N), "assigning variable p_1d_vec[(sym19__ - 1)]");}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_vec;
      p_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      current_statement__ = 7;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 7;
        for (size_t sym20__ = 1; sym20__ <= M; ++sym20__) {
          current_statement__ = 7;
          for (size_t sym21__ = 1; sym21__ <= K; ++sym21__) {
            current_statement__ = 7;
            assign(p_3d_vec, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), nil_index_list()))), in__.vector(
                   N), "assigning variable p_3d_vec[(sym19__ - 1), (sym20__ - 1), (sym21__ - 1)]");
          }}}
      Eigen::Matrix<local_scalar_t__, 1, -1> p_row_vec;
      p_row_vec = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
      
      current_statement__ = 8;
      p_row_vec = in__.row_vector(N);
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> p_1d_row_vec;
      p_1d_row_vec = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
      
      current_statement__ = 9;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 9;
        assign(p_1d_row_vec, cons_list(index_uni(sym19__), nil_index_list()), in__.row_vector(
               N), "assigning variable p_1d_row_vec[(sym19__ - 1)]");}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> p_3d_row_vec;
      p_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(K, Eigen::Matrix<local_scalar_t__, 1, -1>(N))));
      
      current_statement__ = 10;
      for (size_t sym19__ = 1; sym19__ <= N; ++sym19__) {
        current_statement__ = 10;
        for (size_t sym20__ = 1; sym20__ <= M; ++sym20__) {
          current_statement__ = 10;
          for (size_t sym21__ = 1; sym21__ <= K; ++sym21__) {
            current_statement__ = 10;
            assign(p_3d_row_vec, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), nil_index_list()))), in__.row_vector(
                   N), "assigning variable p_3d_row_vec[(sym19__ - 1), (sym20__ - 1), (sym21__ - 1)]");
          }}}
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> p_ar_mat;
      p_ar_mat = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(4, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(5, Eigen::Matrix<local_scalar_t__, -1, -1>(2, 3)));
      
      current_statement__ = 11;
      for (size_t sym19__ = 1; sym19__ <= 4; ++sym19__) {
        current_statement__ = 11;
        for (size_t sym20__ = 1; sym20__ <= 5; ++sym20__) {
          current_statement__ = 11;
          assign(p_ar_mat, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), nil_index_list())), in__.matrix(
                 2, 3), "assigning variable p_ar_mat[(sym19__ - 1), (sym20__ - 1)]");
        }}
      current_statement__ = 11;
      for (size_t sym19__ = 1; sym19__ <= 4; ++sym19__) {
        current_statement__ = 11;
        for (size_t sym20__ = 1; sym20__ <= 5; ++sym20__) {
          current_statement__ = 11;
          for (size_t sym21__ = 1; sym21__ <= 2; ++sym21__) {
            current_statement__ = 11;
            for (size_t sym22__ = 1; sym22__ <= 3; ++sym22__) {
              current_statement__ = 11;
              if (jacobian__) {
                current_statement__ = 11;
                assign(p_ar_mat, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), cons_list(index_uni(sym22__), nil_index_list())))), lub_constrain(
                       rvalue(p_ar_mat, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), cons_list(index_uni(sym22__), nil_index_list())))), "pretty printed e"),
                       0, 1, lp__), "assigning variable p_ar_mat[(sym19__ - 1), (sym20__ - 1), (sym21__ - 1),\n                            (sym22__ - 1)]");
              } else {
                current_statement__ = 11;
                assign(p_ar_mat, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), cons_list(index_uni(sym22__), nil_index_list())))), lub_constrain(
                       rvalue(p_ar_mat, cons_list(index_uni(sym19__), cons_list(index_uni(sym20__), cons_list(index_uni(sym21__), cons_list(index_uni(sym22__), nil_index_list())))), "pretty printed e"),
                       0, 1), "assigning variable p_ar_mat[(sym19__ - 1), (sym20__ - 1), (sym21__ - 1),\n                            (sym22__ - 1)]");
              }}}}}
      Eigen::Matrix<local_scalar_t__, -1, 1> p_simplex_sym19__;
      p_simplex_sym19__ = Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1));
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p_simplex;
      p_simplex = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      current_statement__ = 12;
      p_simplex_sym19__ = in__.vector((N - 1));
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        assign(p_simplex, nil_index_list(), simplex_constrain(p_simplex_sym19__,
                                                              lp__), "assigning variable p_simplex");
      } else {
        current_statement__ = 12;
        assign(p_simplex, nil_index_list(), simplex_constrain(p_simplex_sym19__), "assigning variable p_simplex");
      }
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_simplex_sym20__;
      p_1d_simplex_sym20__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1)));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_1d_simplex;
      p_1d_simplex = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = 13;
      for (size_t sym21__ = 1; sym21__ <= N; ++sym21__) {
        current_statement__ = 13;
        assign(p_1d_simplex_sym20__, cons_list(index_uni(sym21__), nil_index_list()), in__.vector(
               (N - 1)), "assigning variable p_1d_simplex_sym20__[(sym21__ - 1)]");
      }
      current_statement__ = 13;
      for (size_t sym21__ = 1; sym21__ <= N; ++sym21__) {
        current_statement__ = 13;
        if (jacobian__) {
          current_statement__ = 13;
          assign(p_1d_simplex, cons_list(index_uni(sym21__), nil_index_list()), simplex_constrain(
                 rvalue(p_1d_simplex_sym20__, cons_list(index_uni(sym21__), nil_index_list()), "pretty printed e"),
                 lp__), "assigning variable p_1d_simplex[(sym21__ - 1)]");
        } else {
          current_statement__ = 13;
          assign(p_1d_simplex, cons_list(index_uni(sym21__), nil_index_list()), simplex_constrain(
                 rvalue(p_1d_simplex_sym20__, cons_list(index_uni(sym21__), nil_index_list()), "pretty printed e")), "assigning variable p_1d_simplex[(sym21__ - 1)]");
        }}
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_simplex_sym21__;
      p_3d_simplex_sym21__ = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>((N - 1)))));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> p_3d_simplex;
      p_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      current_statement__ = 14;
      for (size_t sym22__ = 1; sym22__ <= N; ++sym22__) {
        current_statement__ = 14;
        for (size_t sym23__ = 1; sym23__ <= M; ++sym23__) {
          current_statement__ = 14;
          for (size_t sym24__ = 1; sym24__ <= K; ++sym24__) {
            current_statement__ = 14;
            assign(p_3d_simplex_sym21__, cons_list(index_uni(sym22__), cons_list(index_uni(sym23__), cons_list(index_uni(sym24__), nil_index_list()))), in__.vector(
                   (N - 1)), "assigning variable p_3d_simplex_sym21__[(sym22__ - 1), (sym23__ - 1),\n                                        (sym24__ - 1)]");
          }}}
      current_statement__ = 14;
      for (size_t sym22__ = 1; sym22__ <= N; ++sym22__) {
        current_statement__ = 14;
        for (size_t sym23__ = 1; sym23__ <= M; ++sym23__) {
          current_statement__ = 14;
          for (size_t sym24__ = 1; sym24__ <= K; ++sym24__) {
            current_statement__ = 14;
            if (jacobian__) {
              current_statement__ = 14;
              assign(p_3d_simplex, cons_list(index_uni(sym22__), cons_list(index_uni(sym23__), cons_list(index_uni(sym24__), nil_index_list()))), simplex_constrain(
                     rvalue(p_3d_simplex_sym21__, cons_list(index_uni(sym22__), cons_list(index_uni(sym23__), cons_list(index_uni(sym24__), nil_index_list()))), "pretty printed e"),
                     lp__), "assigning variable p_3d_simplex[(sym22__ - 1), (sym23__ - 1), (sym24__ - 1)]");
            } else {
              current_statement__ = 14;
              assign(p_3d_simplex, cons_list(index_uni(sym22__), cons_list(index_uni(sym23__), cons_list(index_uni(sym24__), nil_index_list()))), simplex_constrain(
                     rvalue(p_3d_simplex_sym21__, cons_list(index_uni(sym22__), cons_list(index_uni(sym23__), cons_list(index_uni(sym24__), nil_index_list()))), "pretty printed e")), "assigning variable p_3d_simplex[(sym22__ - 1), (sym23__ - 1), (sym24__ - 1)]");
            }}}}
      Eigen::Matrix<local_scalar_t__, -1, 1> p_cfcov_54_sym22__;
      p_cfcov_54_sym22__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)));
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p_cfcov_54;
      p_cfcov_54 = Eigen::Matrix<local_scalar_t__, -1, -1>(5, 4);
      
      current_statement__ = 15;
      p_cfcov_54_sym22__ = in__.vector(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)));
      current_statement__ = 15;
      if (jacobian__) {
        current_statement__ = 15;
        assign(p_cfcov_54, nil_index_list(), cholesky_factor_constrain(
               p_cfcov_54_sym22__, 5, 4, lp__), "assigning variable p_cfcov_54");
      } else {
        current_statement__ = 15;
        assign(p_cfcov_54, nil_index_list(), cholesky_factor_constrain(
               p_cfcov_54_sym22__, 5, 4), "assigning variable p_cfcov_54");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> p_cfcov_33_sym23__;
      p_cfcov_33_sym23__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)));
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p_cfcov_33;
      p_cfcov_33 = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3);
      
      current_statement__ = 16;
      p_cfcov_33_sym23__ = in__.vector(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)));
      current_statement__ = 16;
      if (jacobian__) {
        current_statement__ = 16;
        assign(p_cfcov_33, nil_index_list(), cholesky_factor_constrain(
               p_cfcov_33_sym23__, 3, 3, lp__), "assigning variable p_cfcov_33");
      } else {
        current_statement__ = 16;
        assign(p_cfcov_33, nil_index_list(), cholesky_factor_constrain(
               p_cfcov_33_sym23__, 3, 3), "assigning variable p_cfcov_33");
      }
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_cfcov_33_ar_sym24__;
      p_cfcov_33_ar_sym24__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> p_cfcov_33_ar;
      p_cfcov_33_ar = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3));
      
      current_statement__ = 17;
      for (size_t sym25__ = 1; sym25__ <= K; ++sym25__) {
        current_statement__ = 17;
        assign(p_cfcov_33_ar_sym24__, cons_list(index_uni(sym25__), nil_index_list()), in__.vector(
               ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))), "assigning variable p_cfcov_33_ar_sym24__[(sym25__ - 1)]");
      }
      current_statement__ = 17;
      for (size_t sym25__ = 1; sym25__ <= K; ++sym25__) {
        current_statement__ = 17;
        if (jacobian__) {
          current_statement__ = 17;
          assign(p_cfcov_33_ar, cons_list(index_uni(sym25__), nil_index_list()), cholesky_factor_constrain(
                 rvalue(p_cfcov_33_ar_sym24__, cons_list(index_uni(sym25__), nil_index_list()), "pretty printed e"),
                 3, 3, lp__), "assigning variable p_cfcov_33_ar[(sym25__ - 1)]");
        } else {
          current_statement__ = 17;
          assign(p_cfcov_33_ar, cons_list(index_uni(sym25__), nil_index_list()), cholesky_factor_constrain(
                 rvalue(p_cfcov_33_ar_sym24__, cons_list(index_uni(sym25__), nil_index_list()), "pretty printed e"),
                 3, 3), "assigning variable p_cfcov_33_ar[(sym25__ - 1)]");
        }}
      std::vector<local_scalar_t__> tp_real_1d_ar;
      tp_real_1d_ar = std::vector<local_scalar_t__>(N, 0);
      
      std::vector<std::vector<std::vector<local_scalar_t__>>> tp_real_3d_ar;
      tp_real_3d_ar = std::vector<std::vector<std::vector<local_scalar_t__>>>(N, std::vector<std::vector<local_scalar_t__>>(M, std::vector<local_scalar_t__>(K, 0)));
      
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_vec;
      tp_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_1d_vec;
      tp_1d_vec = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tp_3d_vec;
      tp_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      Eigen::Matrix<local_scalar_t__, 1, -1> tp_row_vec;
      tp_row_vec = Eigen::Matrix<local_scalar_t__, 1, -1>(N);
      
      std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>> tp_1d_row_vec;
      tp_1d_row_vec = std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(N, Eigen::Matrix<local_scalar_t__, 1, -1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>> tp_3d_row_vec;
      tp_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, 1, -1>>(K, Eigen::Matrix<local_scalar_t__, 1, -1>(N))));
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> tp_ar_mat;
      tp_ar_mat = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(4, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(5, Eigen::Matrix<local_scalar_t__, -1, -1>(2, 3)));
      
      Eigen::Matrix<local_scalar_t__, -1, 1> tp_simplex;
      tp_simplex = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tp_1d_simplex;
      tp_1d_simplex = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>> tp_3d_simplex;
      tp_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(M, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N))));
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_cfcov_54;
      tp_cfcov_54 = Eigen::Matrix<local_scalar_t__, -1, -1>(5, 4);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> tp_cfcov_33;
      tp_cfcov_33 = Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> tp_cfcov_33_ar;
      tp_cfcov_33_ar = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(K, Eigen::Matrix<local_scalar_t__, -1, -1>(3, 3));
      
      current_statement__ = 33;
      assign(tp_real_1d_ar, nil_index_list(), p_real_1d_ar, "assigning variable tp_real_1d_ar");
      current_statement__ = 34;
      assign(tp_real_3d_ar, nil_index_list(), p_real_3d_ar, "assigning variable tp_real_3d_ar");
      current_statement__ = 35;
      assign(tp_1d_vec, nil_index_list(), p_1d_vec, "assigning variable tp_1d_vec");
      current_statement__ = 36;
      assign(tp_3d_vec, nil_index_list(), p_3d_vec, "assigning variable tp_3d_vec");
      current_statement__ = 37;
      assign(tp_simplex, nil_index_list(), p_simplex, "assigning variable tp_simplex");
      current_statement__ = 38;
      assign(tp_1d_simplex, nil_index_list(), p_1d_simplex, "assigning variable tp_1d_simplex");
      current_statement__ = 39;
      assign(tp_3d_simplex, nil_index_list(), p_3d_simplex, "assigning variable tp_3d_simplex");
      current_statement__ = 40;
      assign(tp_cfcov_54, nil_index_list(), p_cfcov_54, "assigning variable tp_cfcov_54");
      current_statement__ = 41;
      assign(tp_cfcov_33, nil_index_list(), p_cfcov_33, "assigning variable tp_cfcov_33");
      current_statement__ = 42;
      assign(tp_cfcov_33_ar, nil_index_list(), p_cfcov_33_ar, "assigning variable tp_cfcov_33_ar");
      current_statement__ = 51;
      for (size_t i = 1; i <= 2; ++i) {
        current_statement__ = 49;
        for (size_t j = 1; j <= 3; ++j) {
          current_statement__ = 47;
          for (size_t m = 1; m <= 4; ++m) {
            current_statement__ = 45;
            for (size_t n = 1; n <= 5; ++n) {
              current_statement__ = 43;
              assign(tp_ar_mat, cons_list(index_uni(m), cons_list(index_uni(n), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())))), 0.4, "assigning variable tp_ar_mat[(m - 1), (n - 1), (i - 1), (j - 1)]");
            }}}}
      current_statement__ = 53;
      for (size_t i = 1; i <= N; ++i) {
        current_statement__ = 52;
        assign(tp_vec, cons_list(index_uni(i), nil_index_list()), (-1.0 * rvalue(p_vec, cons_list(index_uni(i), nil_index_list()), "pretty printed e")), "assigning variable tp_vec[(i - 1)]");
      }
      current_statement__ = 18;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_greater_or_equal(function__, "tp_real_1d_ar[sym13__]",
                               rvalue(tp_real_1d_ar, cons_list(index_uni(sym13__), nil_index_list()), "pretty printed e"),
                               0);}
      current_statement__ = 19;
      for (size_t sym13__ = 1; sym13__ <= N; ++sym13__) {
        current_statement__ = 19;
        for (size_t sym14__ = 1; sym14__ <= M; ++sym14__) {
          current_statement__ = 19;
          for (size_t sym15__ = 1; sym15__ <= K; ++sym15__) {
            current_statement__ = 19;
            current_statement__ = 19;
            check_greater_or_equal(function__,
                                   "tp_real_3d_ar[sym13__, sym14__, sym15__]",
                                   rvalue(tp_real_3d_ar, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), cons_list(index_uni(sym15__), nil_index_list()))), "pretty printed e"),
                                   0);}}}
      current_statement__ = 20;
      current_statement__ = 20;
      check_less_or_equal(function__, "tp_vec", tp_vec, 0);
      current_statement__ = 26;
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        current_statement__ = 26;
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          current_statement__ = 26;
          current_statement__ = 26;
          check_greater_or_equal(function__, "tp_ar_mat[sym13__, sym14__]",
                                 rvalue(tp_ar_mat, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), nil_index_list())), "pretty printed e"),
                                 0);}}
      current_statement__ = 26;
      for (size_t sym13__ = 1; sym13__ <= 4; ++sym13__) {
        current_statement__ = 26;
        for (size_t sym14__ = 1; sym14__ <= 5; ++sym14__) {
          current_statement__ = 26;
          current_statement__ = 26;
          check_less_or_equal(function__, "tp_ar_mat[sym13__, sym14__]",
                              rvalue(tp_ar_mat, cons_list(index_uni(sym13__), cons_list(index_uni(sym14__), nil_index_list())), "pretty printed e"),
                              1);}}
      current_statement__ = 27;
      current_statement__ = 27;
      check_simplex(function__, "tp_simplex", tp_simplex);
      current_statement__ = 28;
      for (size_t sym14__ = 1; sym14__ <= N; ++sym14__) {
        current_statement__ = 28;
        current_statement__ = 28;
        check_simplex(function__, "tp_1d_simplex[sym14__]",
                      rvalue(tp_1d_simplex, cons_list(index_uni(sym14__), nil_index_list()), "pretty printed e"));
      }
      current_statement__ = 29;
      for (size_t sym15__ = 1; sym15__ <= N; ++sym15__) {
        current_statement__ = 29;
        for (size_t sym16__ = 1; sym16__ <= M; ++sym16__) {
          current_statement__ = 29;
          for (size_t sym17__ = 1; sym17__ <= K; ++sym17__) {
            current_statement__ = 29;
            current_statement__ = 29;
            check_simplex(function__,
                          "tp_3d_simplex[sym15__, sym16__, sym17__]",
                          rvalue(tp_3d_simplex, cons_list(index_uni(sym15__), cons_list(index_uni(sym16__), cons_list(index_uni(sym17__), nil_index_list()))), "pretty printed e"));
          }}}
      current_statement__ = 30;
      current_statement__ = 30;
      check_cholesky_factor(function__, "tp_cfcov_54", tp_cfcov_54);
      current_statement__ = 31;
      current_statement__ = 31;
      check_cholesky_factor(function__, "tp_cfcov_33", tp_cfcov_33);
      current_statement__ = 32;
      for (size_t sym18__ = 1; sym18__ <= K; ++sym18__) {
        current_statement__ = 32;
        current_statement__ = 32;
        check_cholesky_factor(function__, "tp_cfcov_33_ar[sym18__]",
                              rvalue(tp_cfcov_33_ar, cons_list(index_uni(sym18__), nil_index_list()), "pretty printed e"));
      }
      {
        local_scalar_t__ r1;
        
        current_statement__ = 92;
        r1 = foo_bar1(p_real, pstream__);
        local_scalar_t__ r2;
        
        current_statement__ = 93;
        r2 = foo_bar1(J, pstream__);
        current_statement__ = 94;
        lp_accum__.add(normal_log<propto__>(p_real, 0, 1));
        current_statement__ = 95;
        lp_accum__.add(normal_log<propto__>(to_vector(p_real_1d_ar), 0, 1));
        current_statement__ = 108;
        for (size_t n = 1; n <= N; ++n) {
          current_statement__ = 96;
          lp_accum__.add(normal_log<propto__>(to_vector(rvalue(p_1d_vec, cons_list(index_uni(n), nil_index_list()), "pretty printed e")),
                                              0, 1));
          current_statement__ = 97;
          lp_accum__.add(normal_log<propto__>(to_vector(rvalue(p_1d_row_vec, cons_list(index_uni(n), nil_index_list()), "pretty printed e")),
                                              0, 1));
          current_statement__ = 98;
          lp_accum__.add(normal_log<propto__>(to_vector(rvalue(p_1d_simplex, cons_list(index_uni(n), nil_index_list()), "pretty printed e")),
                                              0, 1));
          current_statement__ = 106;
          for (size_t m = 1; m <= M; ++m) {
            current_statement__ = 104;
            for (size_t k = 1; k <= K; ++k) {
              current_statement__ = 99;
              lp_accum__.add(normal_log<propto__>(to_vector(rvalue(p_3d_vec, cons_list(index_uni(n), cons_list(index_uni(m), cons_list(index_uni(k), nil_index_list()))), "pretty printed e")),
                                                  0, 1));
              current_statement__ = 100;
              lp_accum__.add(normal_log<propto__>(to_vector(rvalue(p_3d_row_vec, cons_list(index_uni(n), cons_list(index_uni(m), cons_list(index_uni(k), nil_index_list()))), "pretty printed e")),
                                                  0, 1));
              current_statement__ = 101;
              lp_accum__.add(normal_log<propto__>(to_vector(rvalue(p_3d_simplex, cons_list(index_uni(n), cons_list(index_uni(m), cons_list(index_uni(k), nil_index_list()))), "pretty printed e")),
                                                  0, 1));
              current_statement__ = 102;
              lp_accum__.add(normal_log<propto__>(rvalue(p_real_3d_ar, cons_list(index_uni(n), cons_list(index_uni(m), cons_list(index_uni(k), nil_index_list()))), "pretty printed e"),
                                                  0, 1));}}}
        current_statement__ = 113;
        for (size_t i = 1; i <= 4; ++i) {
          current_statement__ = 111;
          for (size_t j = 1; j <= 5; ++j) {
            current_statement__ = 109;
            lp_accum__.add(normal_log<propto__>(to_vector(rvalue(p_ar_mat, cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())), "pretty printed e")),
                                                0, 1));}}
        current_statement__ = 116;
        for (size_t k = 1; k <= K; ++k) {
          current_statement__ = 114;
          lp_accum__.add(normal_log<propto__>(to_vector(rvalue(p_cfcov_33_ar, cons_list(index_uni(k), nil_index_list()), "pretty printed e")),
                                              0, 1));}
        current_statement__ = 117;
        lp_accum__.add(normal_log<propto__>(to_vector(p_vec), 0, 1));
        current_statement__ = 118;
        lp_accum__.add(normal_log<propto__>(to_vector(p_row_vec), 0, 1));
        current_statement__ = 119;
        lp_accum__.add(normal_log<propto__>(to_vector(p_simplex), 0, 1));
        current_statement__ = 120;
        lp_accum__.add(normal_log<propto__>(to_vector(p_cfcov_54), 0, 1));
        current_statement__ = 121;
        lp_accum__.add(normal_log<propto__>(to_vector(p_cfcov_33), 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("p_real");
    names__.push_back("p_real_1d_ar");
    names__.push_back("p_real_3d_ar");
    names__.push_back("p_vec");
    names__.push_back("p_1d_vec");
    names__.push_back("p_3d_vec");
    names__.push_back("p_row_vec");
    names__.push_back("p_1d_row_vec");
    names__.push_back("p_3d_row_vec");
    names__.push_back("p_ar_mat");
    names__.push_back("p_simplex");
    names__.push_back("p_1d_simplex");
    names__.push_back("p_3d_simplex");
    names__.push_back("p_cfcov_54");
    names__.push_back("p_cfcov_33");
    names__.push_back("p_cfcov_33_ar");
    names__.push_back("tp_real_1d_ar");
    names__.push_back("tp_real_3d_ar");
    names__.push_back("tp_vec");
    names__.push_back("tp_1d_vec");
    names__.push_back("tp_3d_vec");
    names__.push_back("tp_row_vec");
    names__.push_back("tp_1d_row_vec");
    names__.push_back("tp_3d_row_vec");
    names__.push_back("tp_ar_mat");
    names__.push_back("tp_simplex");
    names__.push_back("tp_1d_simplex");
    names__.push_back("tp_3d_simplex");
    names__.push_back("tp_cfcov_54");
    names__.push_back("tp_cfcov_33");
    names__.push_back("tp_cfcov_33_ar");
    names__.push_back("gq_r1");
    names__.push_back("gq_r2");
    names__.push_back("gq_real_1d_ar");
    names__.push_back("gq_real_3d_ar");
    names__.push_back("gq_vec");
    names__.push_back("gq_1d_vec");
    names__.push_back("gq_3d_vec");
    names__.push_back("gq_row_vec");
    names__.push_back("gq_1d_row_vec");
    names__.push_back("gq_3d_row_vec");
    names__.push_back("gq_ar_mat");
    names__.push_back("gq_simplex");
    names__.push_back("gq_1d_simplex");
    names__.push_back("gq_3d_simplex");
    names__.push_back("gq_cfcov_54");
    names__.push_back("gq_cfcov_33");
    names__.push_back("gq_cfcov_33_ar");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(4);
    
    dims__.push_back(5);
    
    dims__.push_back(2);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(4);
    
    dims__.push_back(5);
    
    dims__.push_back(2);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(4);
    
    dims__.push_back(5);
    
    dims__.push_back(2);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(M);
    
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(5);
    
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(3);
    
    dims__.push_back(3);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "mother_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double p_real;
      
      current_statement__ = 2;
      p_real = in__.scalar();
      std::vector<double> p_real_1d_ar;
      p_real_1d_ar = std::vector<double>(N, 0);
      
      current_statement__ = 3;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 3;
        assign(p_real_1d_ar, cons_list(index_uni(sym37__), nil_index_list()), in__.scalar(
               ), "assigning variable p_real_1d_ar[(sym37__ - 1)]");}
      current_statement__ = 3;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 3;
        assign(p_real_1d_ar, cons_list(index_uni(sym37__), nil_index_list()), lb_constrain(
               rvalue(p_real_1d_ar, cons_list(index_uni(sym37__), nil_index_list()), "pretty printed e"),
               0), "assigning variable p_real_1d_ar[(sym37__ - 1)]");}
      std::vector<std::vector<std::vector<double>>> p_real_3d_ar;
      p_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      current_statement__ = 4;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 4;
        for (size_t sym38__ = 1; sym38__ <= M; ++sym38__) {
          current_statement__ = 4;
          for (size_t sym39__ = 1; sym39__ <= K; ++sym39__) {
            current_statement__ = 4;
            assign(p_real_3d_ar, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), nil_index_list()))), in__.scalar(
                   ), "assigning variable p_real_3d_ar[(sym37__ - 1), (sym38__ - 1), (sym39__ - 1)]");
          }}}
      current_statement__ = 4;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 4;
        for (size_t sym38__ = 1; sym38__ <= M; ++sym38__) {
          current_statement__ = 4;
          for (size_t sym39__ = 1; sym39__ <= K; ++sym39__) {
            current_statement__ = 4;
            assign(p_real_3d_ar, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), nil_index_list()))), lb_constrain(
                   rvalue(p_real_3d_ar, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), nil_index_list()))), "pretty printed e"),
                   0), "assigning variable p_real_3d_ar[(sym37__ - 1), (sym38__ - 1), (sym39__ - 1)]");
          }}}
      Eigen::Matrix<double, -1, 1> p_vec;
      p_vec = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 5;
      p_vec = in__.vector(N);
      current_statement__ = 5;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 5;
        assign(p_vec, cons_list(index_uni(sym37__), nil_index_list()), lb_constrain(
               rvalue(p_vec, cons_list(index_uni(sym37__), nil_index_list()), "pretty printed e"),
               0), "assigning variable p_vec[(sym37__ - 1)]");}
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_vec;
      p_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 6;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 6;
        assign(p_1d_vec, cons_list(index_uni(sym37__), nil_index_list()), in__.vector(
               N), "assigning variable p_1d_vec[(sym37__ - 1)]");}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_vec;
      p_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 7;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 7;
        for (size_t sym38__ = 1; sym38__ <= M; ++sym38__) {
          current_statement__ = 7;
          for (size_t sym39__ = 1; sym39__ <= K; ++sym39__) {
            current_statement__ = 7;
            assign(p_3d_vec, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), nil_index_list()))), in__.vector(
                   N), "assigning variable p_3d_vec[(sym37__ - 1), (sym38__ - 1), (sym39__ - 1)]");
          }}}
      Eigen::Matrix<double, 1, -1> p_row_vec;
      p_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      current_statement__ = 8;
      p_row_vec = in__.row_vector(N);
      std::vector<Eigen::Matrix<double, 1, -1>> p_1d_row_vec;
      p_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      current_statement__ = 9;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 9;
        assign(p_1d_row_vec, cons_list(index_uni(sym37__), nil_index_list()), in__.row_vector(
               N), "assigning variable p_1d_row_vec[(sym37__ - 1)]");}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> p_3d_row_vec;
      p_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      current_statement__ = 10;
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        current_statement__ = 10;
        for (size_t sym38__ = 1; sym38__ <= M; ++sym38__) {
          current_statement__ = 10;
          for (size_t sym39__ = 1; sym39__ <= K; ++sym39__) {
            current_statement__ = 10;
            assign(p_3d_row_vec, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), nil_index_list()))), in__.row_vector(
                   N), "assigning variable p_3d_row_vec[(sym37__ - 1), (sym38__ - 1), (sym39__ - 1)]");
          }}}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> p_ar_mat;
      p_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      current_statement__ = 11;
      for (size_t sym37__ = 1; sym37__ <= 4; ++sym37__) {
        current_statement__ = 11;
        for (size_t sym38__ = 1; sym38__ <= 5; ++sym38__) {
          current_statement__ = 11;
          assign(p_ar_mat, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), nil_index_list())), in__.matrix(
                 2, 3), "assigning variable p_ar_mat[(sym37__ - 1), (sym38__ - 1)]");
        }}
      current_statement__ = 11;
      for (size_t sym37__ = 1; sym37__ <= 4; ++sym37__) {
        current_statement__ = 11;
        for (size_t sym38__ = 1; sym38__ <= 5; ++sym38__) {
          current_statement__ = 11;
          for (size_t sym39__ = 1; sym39__ <= 2; ++sym39__) {
            current_statement__ = 11;
            for (size_t sym40__ = 1; sym40__ <= 3; ++sym40__) {
              current_statement__ = 11;
              assign(p_ar_mat, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), cons_list(index_uni(sym40__), nil_index_list())))), lub_constrain(
                     rvalue(p_ar_mat, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), cons_list(index_uni(sym40__), nil_index_list())))), "pretty printed e"),
                     0, 1), "assigning variable p_ar_mat[(sym37__ - 1), (sym38__ - 1), (sym39__ - 1),\n                            (sym40__ - 1)]");
            }}}}
      Eigen::Matrix<double, -1, 1> p_simplex_sym37__;
      p_simplex_sym37__ = Eigen::Matrix<double, -1, 1>((N - 1));
      
      Eigen::Matrix<double, -1, 1> p_simplex;
      p_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 12;
      p_simplex_sym37__ = in__.vector((N - 1));
      current_statement__ = 12;
      assign(p_simplex, nil_index_list(), simplex_constrain(p_simplex_sym37__), "assigning variable p_simplex");
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_simplex_sym38__;
      p_1d_simplex_sym38__ = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>((N - 1)));
      
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_simplex;
      p_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 13;
      for (size_t sym39__ = 1; sym39__ <= N; ++sym39__) {
        current_statement__ = 13;
        assign(p_1d_simplex_sym38__, cons_list(index_uni(sym39__), nil_index_list()), in__.vector(
               (N - 1)), "assigning variable p_1d_simplex_sym38__[(sym39__ - 1)]");
      }
      current_statement__ = 13;
      for (size_t sym39__ = 1; sym39__ <= N; ++sym39__) {
        current_statement__ = 13;
        assign(p_1d_simplex, cons_list(index_uni(sym39__), nil_index_list()), simplex_constrain(
               rvalue(p_1d_simplex_sym38__, cons_list(index_uni(sym39__), nil_index_list()), "pretty printed e")), "assigning variable p_1d_simplex[(sym39__ - 1)]");
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_simplex_sym39__;
      p_3d_simplex_sym39__ = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>((N - 1)))));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_simplex;
      p_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 14;
      for (size_t sym40__ = 1; sym40__ <= N; ++sym40__) {
        current_statement__ = 14;
        for (size_t sym41__ = 1; sym41__ <= M; ++sym41__) {
          current_statement__ = 14;
          for (size_t sym42__ = 1; sym42__ <= K; ++sym42__) {
            current_statement__ = 14;
            assign(p_3d_simplex_sym39__, cons_list(index_uni(sym40__), cons_list(index_uni(sym41__), cons_list(index_uni(sym42__), nil_index_list()))), in__.vector(
                   (N - 1)), "assigning variable p_3d_simplex_sym39__[(sym40__ - 1), (sym41__ - 1),\n                                        (sym42__ - 1)]");
          }}}
      current_statement__ = 14;
      for (size_t sym40__ = 1; sym40__ <= N; ++sym40__) {
        current_statement__ = 14;
        for (size_t sym41__ = 1; sym41__ <= M; ++sym41__) {
          current_statement__ = 14;
          for (size_t sym42__ = 1; sym42__ <= K; ++sym42__) {
            current_statement__ = 14;
            assign(p_3d_simplex, cons_list(index_uni(sym40__), cons_list(index_uni(sym41__), cons_list(index_uni(sym42__), nil_index_list()))), simplex_constrain(
                   rvalue(p_3d_simplex_sym39__, cons_list(index_uni(sym40__), cons_list(index_uni(sym41__), cons_list(index_uni(sym42__), nil_index_list()))), "pretty printed e")), "assigning variable p_3d_simplex[(sym40__ - 1), (sym41__ - 1), (sym42__ - 1)]");
          }}}
      Eigen::Matrix<double, -1, 1> p_cfcov_54_sym40__;
      p_cfcov_54_sym40__ = Eigen::Matrix<double, -1, 1>(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)));
      
      Eigen::Matrix<double, -1, -1> p_cfcov_54;
      p_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      current_statement__ = 15;
      p_cfcov_54_sym40__ = in__.vector(((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)));
      current_statement__ = 15;
      assign(p_cfcov_54, nil_index_list(), cholesky_factor_constrain(
             p_cfcov_54_sym40__, 5, 4), "assigning variable p_cfcov_54");
      Eigen::Matrix<double, -1, 1> p_cfcov_33_sym41__;
      p_cfcov_33_sym41__ = Eigen::Matrix<double, -1, 1>(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)));
      
      Eigen::Matrix<double, -1, -1> p_cfcov_33;
      p_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 16;
      p_cfcov_33_sym41__ = in__.vector(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)));
      current_statement__ = 16;
      assign(p_cfcov_33, nil_index_list(), cholesky_factor_constrain(
             p_cfcov_33_sym41__, 3, 3), "assigning variable p_cfcov_33");
      std::vector<Eigen::Matrix<double, -1, 1>> p_cfcov_33_ar_sym42__;
      p_cfcov_33_ar_sym42__ = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))));
      
      std::vector<Eigen::Matrix<double, -1, -1>> p_cfcov_33_ar;
      p_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      current_statement__ = 17;
      for (size_t sym43__ = 1; sym43__ <= K; ++sym43__) {
        current_statement__ = 17;
        assign(p_cfcov_33_ar_sym42__, cons_list(index_uni(sym43__), nil_index_list()), in__.vector(
               ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3))), "assigning variable p_cfcov_33_ar_sym42__[(sym43__ - 1)]");
      }
      current_statement__ = 17;
      for (size_t sym43__ = 1; sym43__ <= K; ++sym43__) {
        current_statement__ = 17;
        assign(p_cfcov_33_ar, cons_list(index_uni(sym43__), nil_index_list()), cholesky_factor_constrain(
               rvalue(p_cfcov_33_ar_sym42__, cons_list(index_uni(sym43__), nil_index_list()), "pretty printed e"),
               3, 3), "assigning variable p_cfcov_33_ar[(sym43__ - 1)]");}
      vars__.push_back(p_real);
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        vars__.push_back(rvalue(p_real_1d_ar, cons_list(index_uni(sym37__), nil_index_list()), "pretty printed e"));
      }
      for (size_t sym39__ = 1; sym39__ <= K; ++sym39__) {
        for (size_t sym38__ = 1; sym38__ <= M; ++sym38__) {
          for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
            vars__.push_back(rvalue(p_real_3d_ar, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        vars__.push_back(rvalue(p_vec, cons_list(index_uni(sym37__), nil_index_list()), "pretty printed e"));
      }
      for (size_t sym38__ = 1; sym38__ <= N; ++sym38__) {
        for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
          vars__.push_back(rvalue(p_1d_vec, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym40__ = 1; sym40__ <= N; ++sym40__) {
        for (size_t sym39__ = 1; sym39__ <= K; ++sym39__) {
          for (size_t sym38__ = 1; sym38__ <= M; ++sym38__) {
            for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
              vars__.push_back(rvalue(p_3d_vec, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), cons_list(index_uni(sym40__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        vars__.push_back(rvalue(p_row_vec, cons_list(index_uni(sym37__), nil_index_list()), "pretty printed e"));
      }
      for (size_t sym38__ = 1; sym38__ <= N; ++sym38__) {
        for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
          vars__.push_back(rvalue(p_1d_row_vec, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym40__ = 1; sym40__ <= N; ++sym40__) {
        for (size_t sym39__ = 1; sym39__ <= K; ++sym39__) {
          for (size_t sym38__ = 1; sym38__ <= M; ++sym38__) {
            for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
              vars__.push_back(rvalue(p_3d_row_vec, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), cons_list(index_uni(sym40__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym40__ = 1; sym40__ <= 3; ++sym40__) {
        for (size_t sym39__ = 1; sym39__ <= 2; ++sym39__) {
          for (size_t sym38__ = 1; sym38__ <= 5; ++sym38__) {
            for (size_t sym37__ = 1; sym37__ <= 4; ++sym37__) {
              vars__.push_back(rvalue(p_ar_mat, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), cons_list(index_uni(sym40__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
        vars__.push_back(rvalue(p_simplex, cons_list(index_uni(sym37__), nil_index_list()), "pretty printed e"));
      }
      for (size_t sym38__ = 1; sym38__ <= N; ++sym38__) {
        for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
          vars__.push_back(rvalue(p_1d_simplex, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym40__ = 1; sym40__ <= N; ++sym40__) {
        for (size_t sym39__ = 1; sym39__ <= K; ++sym39__) {
          for (size_t sym38__ = 1; sym38__ <= M; ++sym38__) {
            for (size_t sym37__ = 1; sym37__ <= N; ++sym37__) {
              vars__.push_back(rvalue(p_3d_simplex, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), cons_list(index_uni(sym40__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym38__ = 1; sym38__ <= 4; ++sym38__) {
        for (size_t sym37__ = 1; sym37__ <= 5; ++sym37__) {
          vars__.push_back(rvalue(p_cfcov_54, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym38__ = 1; sym38__ <= 3; ++sym38__) {
        for (size_t sym37__ = 1; sym37__ <= 3; ++sym37__) {
          vars__.push_back(rvalue(p_cfcov_33, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym39__ = 1; sym39__ <= 3; ++sym39__) {
        for (size_t sym38__ = 1; sym38__ <= 3; ++sym38__) {
          for (size_t sym37__ = 1; sym37__ <= K; ++sym37__) {
            vars__.push_back(rvalue(p_cfcov_33_ar, cons_list(index_uni(sym37__), cons_list(index_uni(sym38__), cons_list(index_uni(sym39__), nil_index_list()))), "pretty printed e"));
          }}}
      std::vector<double> tp_real_1d_ar;
      tp_real_1d_ar = std::vector<double>(N, 0);
      
      std::vector<std::vector<std::vector<double>>> tp_real_3d_ar;
      tp_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      Eigen::Matrix<double, -1, 1> tp_vec;
      tp_vec = Eigen::Matrix<double, -1, 1>(N);
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_1d_vec;
      tp_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> tp_3d_vec;
      tp_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      Eigen::Matrix<double, 1, -1> tp_row_vec;
      tp_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      std::vector<Eigen::Matrix<double, 1, -1>> tp_1d_row_vec;
      tp_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> tp_3d_row_vec;
      tp_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> tp_ar_mat;
      tp_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      Eigen::Matrix<double, -1, 1> tp_simplex;
      tp_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      std::vector<Eigen::Matrix<double, -1, 1>> tp_1d_simplex;
      tp_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> tp_3d_simplex;
      tp_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      Eigen::Matrix<double, -1, -1> tp_cfcov_54;
      tp_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      Eigen::Matrix<double, -1, -1> tp_cfcov_33;
      tp_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      std::vector<Eigen::Matrix<double, -1, -1>> tp_cfcov_33_ar;
      tp_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      if (emit_transformed_parameters__ || emit_generated_quantities__) {
        current_statement__ = 33;
        assign(tp_real_1d_ar, nil_index_list(), p_real_1d_ar, "assigning variable tp_real_1d_ar");
        current_statement__ = 34;
        assign(tp_real_3d_ar, nil_index_list(), p_real_3d_ar, "assigning variable tp_real_3d_ar");
        current_statement__ = 35;
        assign(tp_1d_vec, nil_index_list(), p_1d_vec, "assigning variable tp_1d_vec");
        current_statement__ = 36;
        assign(tp_3d_vec, nil_index_list(), p_3d_vec, "assigning variable tp_3d_vec");
        current_statement__ = 37;
        assign(tp_simplex, nil_index_list(), p_simplex, "assigning variable tp_simplex");
        current_statement__ = 38;
        assign(tp_1d_simplex, nil_index_list(), p_1d_simplex, "assigning variable tp_1d_simplex");
        current_statement__ = 39;
        assign(tp_3d_simplex, nil_index_list(), p_3d_simplex, "assigning variable tp_3d_simplex");
        current_statement__ = 40;
        assign(tp_cfcov_54, nil_index_list(), p_cfcov_54, "assigning variable tp_cfcov_54");
        current_statement__ = 41;
        assign(tp_cfcov_33, nil_index_list(), p_cfcov_33, "assigning variable tp_cfcov_33");
        current_statement__ = 42;
        assign(tp_cfcov_33_ar, nil_index_list(), p_cfcov_33_ar, "assigning variable tp_cfcov_33_ar");
        current_statement__ = 51;
        for (size_t i = 1; i <= 2; ++i) {
          current_statement__ = 49;
          for (size_t j = 1; j <= 3; ++j) {
            current_statement__ = 47;
            for (size_t m = 1; m <= 4; ++m) {
              current_statement__ = 45;
              for (size_t n = 1; n <= 5; ++n) {
                current_statement__ = 43;
                assign(tp_ar_mat, cons_list(index_uni(m), cons_list(index_uni(n), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())))), 0.4, "assigning variable tp_ar_mat[(m - 1), (n - 1), (i - 1), (j - 1)]");
              }}}}
        current_statement__ = 53;
        for (size_t i = 1; i <= N; ++i) {
          current_statement__ = 52;
          assign(tp_vec, cons_list(index_uni(i), nil_index_list()), (-1.0 * rvalue(p_vec, cons_list(index_uni(i), nil_index_list()), "pretty printed e")), "assigning variable tp_vec[(i - 1)]");
        }
        for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
          vars__.push_back(rvalue(tp_real_1d_ar, cons_list(index_uni(sym25__), nil_index_list()), "pretty printed e"));
        }
        for (size_t sym27__ = 1; sym27__ <= K; ++sym27__) {
          for (size_t sym26__ = 1; sym26__ <= M; ++sym26__) {
            for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
              vars__.push_back(rvalue(tp_real_3d_ar, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), cons_list(index_uni(sym27__), nil_index_list()))), "pretty printed e"));
            }}}
        for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
          vars__.push_back(rvalue(tp_vec, cons_list(index_uni(sym25__), nil_index_list()), "pretty printed e"));
        }
        for (size_t sym26__ = 1; sym26__ <= N; ++sym26__) {
          for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
            vars__.push_back(rvalue(tp_1d_vec, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym28__ = 1; sym28__ <= N; ++sym28__) {
          for (size_t sym27__ = 1; sym27__ <= K; ++sym27__) {
            for (size_t sym26__ = 1; sym26__ <= M; ++sym26__) {
              for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
                vars__.push_back(rvalue(tp_3d_vec, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), cons_list(index_uni(sym27__), cons_list(index_uni(sym28__), nil_index_list())))), "pretty printed e"));
              }}}}
        for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
          vars__.push_back(rvalue(tp_row_vec, cons_list(index_uni(sym25__), nil_index_list()), "pretty printed e"));
        }
        for (size_t sym26__ = 1; sym26__ <= N; ++sym26__) {
          for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
            vars__.push_back(rvalue(tp_1d_row_vec, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym28__ = 1; sym28__ <= N; ++sym28__) {
          for (size_t sym27__ = 1; sym27__ <= K; ++sym27__) {
            for (size_t sym26__ = 1; sym26__ <= M; ++sym26__) {
              for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
                vars__.push_back(rvalue(tp_3d_row_vec, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), cons_list(index_uni(sym27__), cons_list(index_uni(sym28__), nil_index_list())))), "pretty printed e"));
              }}}}
        for (size_t sym28__ = 1; sym28__ <= 3; ++sym28__) {
          for (size_t sym27__ = 1; sym27__ <= 2; ++sym27__) {
            for (size_t sym26__ = 1; sym26__ <= 5; ++sym26__) {
              for (size_t sym25__ = 1; sym25__ <= 4; ++sym25__) {
                vars__.push_back(rvalue(tp_ar_mat, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), cons_list(index_uni(sym27__), cons_list(index_uni(sym28__), nil_index_list())))), "pretty printed e"));
              }}}}
        for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
          vars__.push_back(rvalue(tp_simplex, cons_list(index_uni(sym25__), nil_index_list()), "pretty printed e"));
        }
        for (size_t sym26__ = 1; sym26__ <= N; ++sym26__) {
          for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
            vars__.push_back(rvalue(tp_1d_simplex, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym28__ = 1; sym28__ <= N; ++sym28__) {
          for (size_t sym27__ = 1; sym27__ <= K; ++sym27__) {
            for (size_t sym26__ = 1; sym26__ <= M; ++sym26__) {
              for (size_t sym25__ = 1; sym25__ <= N; ++sym25__) {
                vars__.push_back(rvalue(tp_3d_simplex, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), cons_list(index_uni(sym27__), cons_list(index_uni(sym28__), nil_index_list())))), "pretty printed e"));
              }}}}
        for (size_t sym26__ = 1; sym26__ <= 4; ++sym26__) {
          for (size_t sym25__ = 1; sym25__ <= 5; ++sym25__) {
            vars__.push_back(rvalue(tp_cfcov_54, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym26__ = 1; sym26__ <= 3; ++sym26__) {
          for (size_t sym25__ = 1; sym25__ <= 3; ++sym25__) {
            vars__.push_back(rvalue(tp_cfcov_33, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym27__ = 1; sym27__ <= 3; ++sym27__) {
          for (size_t sym26__ = 1; sym26__ <= 3; ++sym26__) {
            for (size_t sym25__ = 1; sym25__ <= K; ++sym25__) {
              vars__.push_back(rvalue(tp_cfcov_33_ar, cons_list(index_uni(sym25__), cons_list(index_uni(sym26__), cons_list(index_uni(sym27__), nil_index_list()))), "pretty printed e"));
            }}}
      } 
      if (emit_generated_quantities__) {
        double gq_r1;
        
        current_statement__ = 54;
        gq_r1 = foo_bar1(p_real, pstream__);
        double gq_r2;
        
        current_statement__ = 55;
        gq_r2 = foo_bar1(J, pstream__);
        std::vector<double> gq_real_1d_ar;
        gq_real_1d_ar = std::vector<double>(N, 0);
        
        std::vector<std::vector<std::vector<double>>> gq_real_3d_ar;
        gq_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
        
        Eigen::Matrix<double, -1, 1> gq_vec;
        gq_vec = Eigen::Matrix<double, -1, 1>(N);
        
        std::vector<Eigen::Matrix<double, -1, 1>> gq_1d_vec;
        gq_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
        
        std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> gq_3d_vec;
        gq_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
        
        Eigen::Matrix<double, 1, -1> gq_row_vec;
        gq_row_vec = Eigen::Matrix<double, 1, -1>(N);
        
        std::vector<Eigen::Matrix<double, 1, -1>> gq_1d_row_vec;
        gq_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
        
        std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> gq_3d_row_vec;
        gq_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
        
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> gq_ar_mat;
        gq_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
        
        Eigen::Matrix<double, -1, 1> gq_simplex;
        gq_simplex = Eigen::Matrix<double, -1, 1>(N);
        
        std::vector<Eigen::Matrix<double, -1, 1>> gq_1d_simplex;
        gq_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
        
        std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> gq_3d_simplex;
        gq_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
        
        Eigen::Matrix<double, -1, -1> gq_cfcov_54;
        gq_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
        
        Eigen::Matrix<double, -1, -1> gq_cfcov_33;
        gq_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
        
        std::vector<Eigen::Matrix<double, -1, -1>> gq_cfcov_33_ar;
        gq_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
        
        current_statement__ = 71;
        assign(gq_real_1d_ar, nil_index_list(), p_real_1d_ar, "assigning variable gq_real_1d_ar");
        current_statement__ = 72;
        assign(gq_real_3d_ar, nil_index_list(), p_real_3d_ar, "assigning variable gq_real_3d_ar");
        current_statement__ = 73;
        assign(gq_1d_vec, nil_index_list(), p_1d_vec, "assigning variable gq_1d_vec");
        current_statement__ = 74;
        assign(gq_3d_vec, nil_index_list(), p_3d_vec, "assigning variable gq_3d_vec");
        current_statement__ = 75;
        assign(gq_simplex, nil_index_list(), p_simplex, "assigning variable gq_simplex");
        current_statement__ = 76;
        assign(gq_1d_simplex, nil_index_list(), p_1d_simplex, "assigning variable gq_1d_simplex");
        current_statement__ = 77;
        assign(gq_3d_simplex, nil_index_list(), p_3d_simplex, "assigning variable gq_3d_simplex");
        current_statement__ = 78;
        assign(gq_cfcov_54, nil_index_list(), p_cfcov_54, "assigning variable gq_cfcov_54");
        current_statement__ = 79;
        assign(gq_cfcov_33, nil_index_list(), p_cfcov_33, "assigning variable gq_cfcov_33");
        current_statement__ = 80;
        assign(gq_cfcov_33_ar, nil_index_list(), p_cfcov_33_ar, "assigning variable gq_cfcov_33_ar");
        current_statement__ = 89;
        for (size_t i = 1; i <= 2; ++i) {
          current_statement__ = 87;
          for (size_t j = 1; j <= 3; ++j) {
            current_statement__ = 85;
            for (size_t m = 1; m <= 4; ++m) {
              current_statement__ = 83;
              for (size_t n = 1; n <= 5; ++n) {
                current_statement__ = 81;
                assign(gq_ar_mat, cons_list(index_uni(m), cons_list(index_uni(n), cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())))), 0.4, "assigning variable gq_ar_mat[(m - 1), (n - 1), (i - 1), (j - 1)]");
              }}}}
        current_statement__ = 91;
        for (size_t i = 1; i <= N; ++i) {
          current_statement__ = 90;
          assign(gq_vec, cons_list(index_uni(i), nil_index_list()), (-1.0 * rvalue(p_vec, cons_list(index_uni(i), nil_index_list()), "pretty printed e")), "assigning variable gq_vec[(i - 1)]");
        }
        vars__.push_back(gq_r1);
        vars__.push_back(gq_r2);
        for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
          vars__.push_back(rvalue(gq_real_1d_ar, cons_list(index_uni(sym31__), nil_index_list()), "pretty printed e"));
        }
        for (size_t sym33__ = 1; sym33__ <= K; ++sym33__) {
          for (size_t sym32__ = 1; sym32__ <= M; ++sym32__) {
            for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
              vars__.push_back(rvalue(gq_real_3d_ar, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), cons_list(index_uni(sym33__), nil_index_list()))), "pretty printed e"));
            }}}
        for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
          vars__.push_back(rvalue(gq_vec, cons_list(index_uni(sym31__), nil_index_list()), "pretty printed e"));
        }
        for (size_t sym32__ = 1; sym32__ <= N; ++sym32__) {
          for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
            vars__.push_back(rvalue(gq_1d_vec, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym34__ = 1; sym34__ <= N; ++sym34__) {
          for (size_t sym33__ = 1; sym33__ <= K; ++sym33__) {
            for (size_t sym32__ = 1; sym32__ <= M; ++sym32__) {
              for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
                vars__.push_back(rvalue(gq_3d_vec, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), cons_list(index_uni(sym33__), cons_list(index_uni(sym34__), nil_index_list())))), "pretty printed e"));
              }}}}
        for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
          vars__.push_back(rvalue(gq_row_vec, cons_list(index_uni(sym31__), nil_index_list()), "pretty printed e"));
        }
        for (size_t sym32__ = 1; sym32__ <= N; ++sym32__) {
          for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
            vars__.push_back(rvalue(gq_1d_row_vec, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym34__ = 1; sym34__ <= N; ++sym34__) {
          for (size_t sym33__ = 1; sym33__ <= K; ++sym33__) {
            for (size_t sym32__ = 1; sym32__ <= M; ++sym32__) {
              for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
                vars__.push_back(rvalue(gq_3d_row_vec, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), cons_list(index_uni(sym33__), cons_list(index_uni(sym34__), nil_index_list())))), "pretty printed e"));
              }}}}
        for (size_t sym34__ = 1; sym34__ <= 3; ++sym34__) {
          for (size_t sym33__ = 1; sym33__ <= 2; ++sym33__) {
            for (size_t sym32__ = 1; sym32__ <= 5; ++sym32__) {
              for (size_t sym31__ = 1; sym31__ <= 4; ++sym31__) {
                vars__.push_back(rvalue(gq_ar_mat, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), cons_list(index_uni(sym33__), cons_list(index_uni(sym34__), nil_index_list())))), "pretty printed e"));
              }}}}
        for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
          vars__.push_back(rvalue(gq_simplex, cons_list(index_uni(sym31__), nil_index_list()), "pretty printed e"));
        }
        for (size_t sym32__ = 1; sym32__ <= N; ++sym32__) {
          for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
            vars__.push_back(rvalue(gq_1d_simplex, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym34__ = 1; sym34__ <= N; ++sym34__) {
          for (size_t sym33__ = 1; sym33__ <= K; ++sym33__) {
            for (size_t sym32__ = 1; sym32__ <= M; ++sym32__) {
              for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
                vars__.push_back(rvalue(gq_3d_simplex, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), cons_list(index_uni(sym33__), cons_list(index_uni(sym34__), nil_index_list())))), "pretty printed e"));
              }}}}
        for (size_t sym32__ = 1; sym32__ <= 4; ++sym32__) {
          for (size_t sym31__ = 1; sym31__ <= 5; ++sym31__) {
            vars__.push_back(rvalue(gq_cfcov_54, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym32__ = 1; sym32__ <= 3; ++sym32__) {
          for (size_t sym31__ = 1; sym31__ <= 3; ++sym31__) {
            vars__.push_back(rvalue(gq_cfcov_33, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), nil_index_list())), "pretty printed e"));
          }}
        for (size_t sym33__ = 1; sym33__ <= 3; ++sym33__) {
          for (size_t sym32__ = 1; sym32__ <= 3; ++sym32__) {
            for (size_t sym31__ = 1; sym31__ <= K; ++sym31__) {
              vars__.push_back(rvalue(gq_cfcov_33_ar, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), cons_list(index_uni(sym33__), nil_index_list()))), "pretty printed e"));
            }}}
        current_statement__ = 56;
        for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
          current_statement__ = 56;
          current_statement__ = 56;
          check_greater_or_equal(function__, "gq_real_1d_ar[sym31__]",
                                 rvalue(gq_real_1d_ar, cons_list(index_uni(sym31__), nil_index_list()), "pretty printed e"),
                                 0);}
        current_statement__ = 57;
        for (size_t sym31__ = 1; sym31__ <= N; ++sym31__) {
          current_statement__ = 57;
          for (size_t sym32__ = 1; sym32__ <= M; ++sym32__) {
            current_statement__ = 57;
            for (size_t sym33__ = 1; sym33__ <= K; ++sym33__) {
              current_statement__ = 57;
              current_statement__ = 57;
              check_greater_or_equal(function__,
                                     "gq_real_3d_ar[sym31__, sym32__, sym33__]",
                                     rvalue(gq_real_3d_ar, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), cons_list(index_uni(sym33__), nil_index_list()))), "pretty printed e"),
                                     0);}}}
        current_statement__ = 58;
        current_statement__ = 58;
        check_less_or_equal(function__, "gq_vec", gq_vec, 1);
        current_statement__ = 64;
        for (size_t sym31__ = 1; sym31__ <= 4; ++sym31__) {
          current_statement__ = 64;
          for (size_t sym32__ = 1; sym32__ <= 5; ++sym32__) {
            current_statement__ = 64;
            current_statement__ = 64;
            check_greater_or_equal(function__, "gq_ar_mat[sym31__, sym32__]",
                                   rvalue(gq_ar_mat, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), nil_index_list())), "pretty printed e"),
                                   0);}}
        current_statement__ = 64;
        for (size_t sym31__ = 1; sym31__ <= 4; ++sym31__) {
          current_statement__ = 64;
          for (size_t sym32__ = 1; sym32__ <= 5; ++sym32__) {
            current_statement__ = 64;
            current_statement__ = 64;
            check_less_or_equal(function__, "gq_ar_mat[sym31__, sym32__]",
                                rvalue(gq_ar_mat, cons_list(index_uni(sym31__), cons_list(index_uni(sym32__), nil_index_list())), "pretty printed e"),
                                1);}}
        current_statement__ = 65;
        current_statement__ = 65;
        check_simplex(function__, "gq_simplex", gq_simplex);
        current_statement__ = 66;
        for (size_t sym32__ = 1; sym32__ <= N; ++sym32__) {
          current_statement__ = 66;
          current_statement__ = 66;
          check_simplex(function__, "gq_1d_simplex[sym32__]",
                        rvalue(gq_1d_simplex, cons_list(index_uni(sym32__), nil_index_list()), "pretty printed e"));
        }
        current_statement__ = 67;
        for (size_t sym33__ = 1; sym33__ <= N; ++sym33__) {
          current_statement__ = 67;
          for (size_t sym34__ = 1; sym34__ <= M; ++sym34__) {
            current_statement__ = 67;
            for (size_t sym35__ = 1; sym35__ <= K; ++sym35__) {
              current_statement__ = 67;
              current_statement__ = 67;
              check_simplex(function__,
                            "gq_3d_simplex[sym33__, sym34__, sym35__]",
                            rvalue(gq_3d_simplex, cons_list(index_uni(sym33__), cons_list(index_uni(sym34__), cons_list(index_uni(sym35__), nil_index_list()))), "pretty printed e"));
            }}}
        current_statement__ = 68;
        current_statement__ = 68;
        check_cholesky_factor(function__, "gq_cfcov_54", gq_cfcov_54);
        current_statement__ = 69;
        current_statement__ = 69;
        check_cholesky_factor(function__, "gq_cfcov_33", gq_cfcov_33);
        current_statement__ = 70;
        for (size_t sym36__ = 1; sym36__ <= K; ++sym36__) {
          current_statement__ = 70;
          current_statement__ = 70;
          check_cholesky_factor(function__, "gq_cfcov_33_ar[sym36__]",
                                rvalue(gq_cfcov_33_ar, cons_list(index_uni(sym36__), nil_index_list()), "pretty printed e"));
        }
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "p_real");
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_real_1d_ar" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1; sym60__ <= K; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= M; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= N; ++sym62__) {
              {
                param_names__.push_back(std::string() + "p_real_3d_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_vec" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_1d_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
              {
                for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                  }}
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_row_vec" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_1d_row_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
              {
                for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_row_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                  }}
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= 2; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= 5; ++sym62__) {
              {
                for (size_t sym63__ = 1; sym63__ <= 4; ++sym63__) {
                  {
                    param_names__.push_back(std::string() + "p_ar_mat" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                  }}
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_simplex" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_1d_simplex" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
              {
                for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_simplex" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                  }}
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= 4; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= 5; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_cfcov_54" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= 3; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_cfcov_33" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= 3; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= K; ++sym62__) {
              {
                param_names__.push_back(std::string() + "p_cfcov_33_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
              }}
          }}
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_real_1d_ar" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= K; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= M; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= N; ++sym62__) {
                {
                  param_names__.push_back(std::string() + "tp_real_3d_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_vec" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_1d_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_row_vec" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_1d_row_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_row_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 2; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= 5; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= 4; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "tp_ar_mat" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_simplex" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_1d_simplex" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_simplex" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 4; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 5; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_cfcov_54" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 3; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_cfcov_33" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 3; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= K; ++sym62__) {
                {
                  param_names__.push_back(std::string() + "tp_cfcov_33_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                }}
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.push_back(std::string() + "gq_r1");
      param_names__.push_back(std::string() + "gq_r2");
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_real_1d_ar" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= K; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= M; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= N; ++sym62__) {
                {
                  param_names__.push_back(std::string() + "gq_real_3d_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_vec" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_1d_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_row_vec" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_1d_row_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_row_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 2; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= 5; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= 4; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "gq_ar_mat" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_simplex" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_1d_simplex" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_simplex" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 4; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 5; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_cfcov_54" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 3; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_cfcov_33" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 3; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= K; ++sym62__) {
                {
                  param_names__.push_back(std::string() + "gq_cfcov_33_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                }}
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "p_real");
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_real_1d_ar" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1; sym60__ <= K; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= M; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= N; ++sym62__) {
              {
                param_names__.push_back(std::string() + "p_real_3d_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_vec" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_1d_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
              {
                for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                  }}
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_row_vec" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_1d_row_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
              {
                for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_row_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                  }}
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= 2; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= 5; ++sym62__) {
              {
                for (size_t sym63__ = 1; sym63__ <= 4; ++sym63__) {
                  {
                    param_names__.push_back(std::string() + "p_ar_mat" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                  }}
              }}
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_simplex" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_1d_simplex" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
          {
            for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
              {
                for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                  {
                    param_names__.push_back(std::string() + "p_3d_simplex" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                  }}
              }}
          }}
      }}
    for (size_t sym60__ = 1;
         sym60__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)); ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_cfcov_54" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1;
         sym60__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym60__) {
      {
        param_names__.push_back(std::string() + "p_cfcov_33" + '.' + std::to_string(sym60__));
      }}
    for (size_t sym60__ = 1;
         sym60__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym60__) {
      {
        for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
          {
            param_names__.push_back(std::string() + "p_cfcov_33_ar" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_real_1d_ar" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= K; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= M; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= N; ++sym62__) {
                {
                  param_names__.push_back(std::string() + "tp_real_3d_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_vec" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_1d_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_row_vec" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_1d_row_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_row_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 2; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= 5; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= 4; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "tp_ar_mat" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_simplex" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_1d_simplex" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "tp_3d_simplex" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1;
           sym60__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)); ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_cfcov_54" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1;
           sym60__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym60__) {
        {
          param_names__.push_back(std::string() + "tp_cfcov_33" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1;
           sym60__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              param_names__.push_back(std::string() + "tp_cfcov_33_ar" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.push_back(std::string() + "gq_r1");
      param_names__.push_back(std::string() + "gq_r2");
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_real_1d_ar" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= K; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= M; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= N; ++sym62__) {
                {
                  param_names__.push_back(std::string() + "gq_real_3d_ar" + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_vec" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_1d_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_row_vec" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_1d_row_vec" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= N; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_row_vec" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= 3; ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= 2; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= 5; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= 4; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "gq_ar_mat" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_simplex" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= N; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_1d_simplex" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
      for (size_t sym60__ = 1; sym60__ <= (N - 1); ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              for (size_t sym62__ = 1; sym62__ <= M; ++sym62__) {
                {
                  for (size_t sym63__ = 1; sym63__ <= N; ++sym63__) {
                    {
                      param_names__.push_back(std::string() + "gq_3d_simplex" + '.' + std::to_string(sym63__) + '.' + std::to_string(sym62__) + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
                    }}
                }}
            }}
        }}
      for (size_t sym60__ = 1;
           sym60__ <= ((((4 * (4 - 1)) / 2) + 4) + ((5 - 4) * 4)); ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_cfcov_54" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1;
           sym60__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym60__) {
        {
          param_names__.push_back(std::string() + "gq_cfcov_33" + '.' + std::to_string(sym60__));
        }}
      for (size_t sym60__ = 1;
           sym60__ <= ((((3 * (3 - 1)) / 2) + 3) + ((3 - 3) * 3)); ++sym60__) {
        {
          for (size_t sym61__ = 1; sym61__ <= K; ++sym61__) {
            {
              param_names__.push_back(std::string() + "gq_cfcov_33_ar" + '.' + std::to_string(sym61__) + '.' + std::to_string(sym60__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      double p_real;
      
      current_statement__ = 2;
      p_real = context__.vals_r("p_real")[(1 - 1)];
      std::vector<double> p_real_1d_ar;
      p_real_1d_ar = std::vector<double>(N, 0);
      
      current_statement__ = 3;
      pos__ = 1;
      current_statement__ = 3;
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        current_statement__ = 3;
        assign(p_real_1d_ar, cons_list(index_uni(sym43__), nil_index_list()), 
               context__.vals_r("p_real_1d_ar")[(pos__ - 1)], "assigning variable p_real_1d_ar[(sym43__ - 1)]");
        current_statement__ = 3;
        pos__ = (pos__ + 1);}
      current_statement__ = 3;
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        current_statement__ = 3;
        assign(p_real_1d_ar, cons_list(index_uni(sym43__), nil_index_list()), lb_free(
               rvalue(p_real_1d_ar, cons_list(index_uni(sym43__), nil_index_list()), "pretty printed e"),
               0), "assigning variable p_real_1d_ar[(sym43__ - 1)]");}
      std::vector<std::vector<std::vector<double>>> p_real_3d_ar;
      p_real_3d_ar = std::vector<std::vector<std::vector<double>>>(N, std::vector<std::vector<double>>(M, std::vector<double>(K, 0)));
      
      current_statement__ = 4;
      pos__ = 1;
      current_statement__ = 4;
      for (size_t sym45__ = 1; sym45__ <= K; ++sym45__) {
        current_statement__ = 4;
        for (size_t sym44__ = 1; sym44__ <= M; ++sym44__) {
          current_statement__ = 4;
          for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
            current_statement__ = 4;
            assign(p_real_3d_ar, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), nil_index_list()))), 
                   context__.vals_r("p_real_3d_ar")[(pos__ - 1)], "assigning variable p_real_3d_ar[(sym43__ - 1), (sym44__ - 1), (sym45__ - 1)]");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}}
      current_statement__ = 4;
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        current_statement__ = 4;
        for (size_t sym44__ = 1; sym44__ <= M; ++sym44__) {
          current_statement__ = 4;
          for (size_t sym45__ = 1; sym45__ <= K; ++sym45__) {
            current_statement__ = 4;
            assign(p_real_3d_ar, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), nil_index_list()))), lb_free(
                   rvalue(p_real_3d_ar, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), nil_index_list()))), "pretty printed e"),
                   0), "assigning variable p_real_3d_ar[(sym43__ - 1), (sym44__ - 1), (sym45__ - 1)]");
          }}}
      Eigen::Matrix<double, -1, 1> p_vec;
      p_vec = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 5;
      pos__ = 1;
      current_statement__ = 5;
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        current_statement__ = 5;
        assign(p_vec, cons_list(index_uni(sym43__), nil_index_list()), 
               context__.vals_r("p_vec")[(pos__ - 1)], "assigning variable p_vec[(sym43__ - 1)]");
        current_statement__ = 5;
        pos__ = (pos__ + 1);}
      current_statement__ = 5;
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        current_statement__ = 5;
        assign(p_vec, cons_list(index_uni(sym43__), nil_index_list()), lb_free(
               rvalue(p_vec, cons_list(index_uni(sym43__), nil_index_list()), "pretty printed e"),
               0), "assigning variable p_vec[(sym43__ - 1)]");}
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_vec;
      p_1d_vec = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 6;
      pos__ = 1;
      current_statement__ = 6;
      for (size_t sym44__ = 1; sym44__ <= N; ++sym44__) {
        current_statement__ = 6;
        for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
          current_statement__ = 6;
          assign(p_1d_vec, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), nil_index_list())), 
                 context__.vals_r("p_1d_vec")[(pos__ - 1)], "assigning variable p_1d_vec[(sym43__ - 1), (sym44__ - 1)]");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_vec;
      p_3d_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 7;
      pos__ = 1;
      current_statement__ = 7;
      for (size_t sym46__ = 1; sym46__ <= N; ++sym46__) {
        current_statement__ = 7;
        for (size_t sym45__ = 1; sym45__ <= K; ++sym45__) {
          current_statement__ = 7;
          for (size_t sym44__ = 1; sym44__ <= M; ++sym44__) {
            current_statement__ = 7;
            for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
              current_statement__ = 7;
              assign(p_3d_vec, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), 
                     context__.vals_r("p_3d_vec")[(pos__ - 1)], "assigning variable p_3d_vec[(sym43__ - 1), (sym44__ - 1), (sym45__ - 1),\n                            (sym46__ - 1)]");
              current_statement__ = 7;
              pos__ = (pos__ + 1);}}}}
      Eigen::Matrix<double, 1, -1> p_row_vec;
      p_row_vec = Eigen::Matrix<double, 1, -1>(N);
      
      current_statement__ = 8;
      pos__ = 1;
      current_statement__ = 8;
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        current_statement__ = 8;
        assign(p_row_vec, cons_list(index_uni(sym43__), nil_index_list()), 
               context__.vals_r("p_row_vec")[(pos__ - 1)], "assigning variable p_row_vec[(sym43__ - 1)]");
        current_statement__ = 8;
        pos__ = (pos__ + 1);}
      std::vector<Eigen::Matrix<double, 1, -1>> p_1d_row_vec;
      p_1d_row_vec = std::vector<Eigen::Matrix<double, 1, -1>>(N, Eigen::Matrix<double, 1, -1>(N));
      
      current_statement__ = 9;
      pos__ = 1;
      current_statement__ = 9;
      for (size_t sym44__ = 1; sym44__ <= N; ++sym44__) {
        current_statement__ = 9;
        for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
          current_statement__ = 9;
          assign(p_1d_row_vec, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), nil_index_list())), 
                 context__.vals_r("p_1d_row_vec")[(pos__ - 1)], "assigning variable p_1d_row_vec[(sym43__ - 1), (sym44__ - 1)]");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}}
      std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>> p_3d_row_vec;
      p_3d_row_vec = std::vector<std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, 1, -1>>>(M, std::vector<Eigen::Matrix<double, 1, -1>>(K, Eigen::Matrix<double, 1, -1>(N))));
      
      current_statement__ = 10;
      pos__ = 1;
      current_statement__ = 10;
      for (size_t sym46__ = 1; sym46__ <= N; ++sym46__) {
        current_statement__ = 10;
        for (size_t sym45__ = 1; sym45__ <= K; ++sym45__) {
          current_statement__ = 10;
          for (size_t sym44__ = 1; sym44__ <= M; ++sym44__) {
            current_statement__ = 10;
            for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
              current_statement__ = 10;
              assign(p_3d_row_vec, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), 
                     context__.vals_r("p_3d_row_vec")[(pos__ - 1)], "assigning variable p_3d_row_vec[(sym43__ - 1), (sym44__ - 1), (sym45__ - 1),\n                                (sym46__ - 1)]");
              current_statement__ = 10;
              pos__ = (pos__ + 1);}}}}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> p_ar_mat;
      p_ar_mat = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(4, std::vector<Eigen::Matrix<double, -1, -1>>(5, Eigen::Matrix<double, -1, -1>(2, 3)));
      
      current_statement__ = 11;
      pos__ = 1;
      current_statement__ = 11;
      for (size_t sym46__ = 1; sym46__ <= 3; ++sym46__) {
        current_statement__ = 11;
        for (size_t sym45__ = 1; sym45__ <= 2; ++sym45__) {
          current_statement__ = 11;
          for (size_t sym44__ = 1; sym44__ <= 5; ++sym44__) {
            current_statement__ = 11;
            for (size_t sym43__ = 1; sym43__ <= 4; ++sym43__) {
              current_statement__ = 11;
              assign(p_ar_mat, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), 
                     context__.vals_r("p_ar_mat")[(pos__ - 1)], "assigning variable p_ar_mat[(sym43__ - 1), (sym44__ - 1), (sym45__ - 1),\n                            (sym46__ - 1)]");
              current_statement__ = 11;
              pos__ = (pos__ + 1);}}}}
      current_statement__ = 11;
      for (size_t sym43__ = 1; sym43__ <= 4; ++sym43__) {
        current_statement__ = 11;
        for (size_t sym44__ = 1; sym44__ <= 5; ++sym44__) {
          current_statement__ = 11;
          for (size_t sym45__ = 1; sym45__ <= 2; ++sym45__) {
            current_statement__ = 11;
            for (size_t sym46__ = 1; sym46__ <= 3; ++sym46__) {
              current_statement__ = 11;
              assign(p_ar_mat, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), lub_free(
                     rvalue(p_ar_mat, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), "pretty printed e"),
                     0, 1), "assigning variable p_ar_mat[(sym43__ - 1), (sym44__ - 1), (sym45__ - 1),\n                            (sym46__ - 1)]");
            }}}}
      Eigen::Matrix<double, -1, 1> p_simplex;
      p_simplex = Eigen::Matrix<double, -1, 1>(N);
      
      current_statement__ = 12;
      pos__ = 1;
      current_statement__ = 12;
      for (size_t sym44__ = 1; sym44__ <= N; ++sym44__) {
        current_statement__ = 12;
        assign(p_simplex, cons_list(index_uni(sym44__), nil_index_list()), 
               context__.vals_r("p_simplex")[(pos__ - 1)], "assigning variable p_simplex[(sym44__ - 1)]");
        current_statement__ = 12;
        pos__ = (pos__ + 1);}
      current_statement__ = 12;
      assign(p_simplex, nil_index_list(), simplex_free(p_simplex), "assigning variable p_simplex");
      std::vector<Eigen::Matrix<double, -1, 1>> p_1d_simplex;
      p_1d_simplex = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 13;
      pos__ = 1;
      current_statement__ = 13;
      for (size_t sym46__ = 1; sym46__ <= N; ++sym46__) {
        current_statement__ = 13;
        for (size_t sym45__ = 1; sym45__ <= N; ++sym45__) {
          current_statement__ = 13;
          assign(p_1d_simplex, cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())), 
                 context__.vals_r("p_1d_simplex")[(pos__ - 1)], "assigning variable p_1d_simplex[(sym45__ - 1), (sym46__ - 1)]");
          current_statement__ = 13;
          pos__ = (pos__ + 1);}}
      current_statement__ = 13;
      for (size_t sym45__ = 1; sym45__ <= N; ++sym45__) {
        current_statement__ = 13;
        assign(p_1d_simplex, cons_list(index_uni(sym45__), nil_index_list()), simplex_free(
               rvalue(p_1d_simplex, cons_list(index_uni(sym45__), nil_index_list()), "pretty printed e")), "assigning variable p_1d_simplex[(sym45__ - 1)]");
      }
      std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>> p_3d_simplex;
      p_3d_simplex = std::vector<std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>>(N, std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(M, std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N))));
      
      current_statement__ = 14;
      pos__ = 1;
      current_statement__ = 14;
      for (size_t sym49__ = 1; sym49__ <= N; ++sym49__) {
        current_statement__ = 14;
        for (size_t sym48__ = 1; sym48__ <= K; ++sym48__) {
          current_statement__ = 14;
          for (size_t sym47__ = 1; sym47__ <= M; ++sym47__) {
            current_statement__ = 14;
            for (size_t sym46__ = 1; sym46__ <= N; ++sym46__) {
              current_statement__ = 14;
              assign(p_3d_simplex, cons_list(index_uni(sym46__), cons_list(index_uni(sym47__), cons_list(index_uni(sym48__), cons_list(index_uni(sym49__), nil_index_list())))), 
                     context__.vals_r("p_3d_simplex")[(pos__ - 1)], "assigning variable p_3d_simplex[(sym46__ - 1), (sym47__ - 1), (sym48__ - 1),\n                                (sym49__ - 1)]");
              current_statement__ = 14;
              pos__ = (pos__ + 1);}}}}
      current_statement__ = 14;
      for (size_t sym46__ = 1; sym46__ <= N; ++sym46__) {
        current_statement__ = 14;
        for (size_t sym47__ = 1; sym47__ <= M; ++sym47__) {
          current_statement__ = 14;
          for (size_t sym48__ = 1; sym48__ <= K; ++sym48__) {
            current_statement__ = 14;
            assign(p_3d_simplex, cons_list(index_uni(sym46__), cons_list(index_uni(sym47__), cons_list(index_uni(sym48__), nil_index_list()))), simplex_free(
                   rvalue(p_3d_simplex, cons_list(index_uni(sym46__), cons_list(index_uni(sym47__), cons_list(index_uni(sym48__), nil_index_list()))), "pretty printed e")), "assigning variable p_3d_simplex[(sym46__ - 1), (sym47__ - 1), (sym48__ - 1)]");
          }}}
      Eigen::Matrix<double, -1, -1> p_cfcov_54;
      p_cfcov_54 = Eigen::Matrix<double, -1, -1>(5, 4);
      
      current_statement__ = 15;
      pos__ = 1;
      current_statement__ = 15;
      for (size_t sym48__ = 1; sym48__ <= 4; ++sym48__) {
        current_statement__ = 15;
        for (size_t sym47__ = 1; sym47__ <= 5; ++sym47__) {
          current_statement__ = 15;
          assign(p_cfcov_54, cons_list(index_uni(sym47__), cons_list(index_uni(sym48__), nil_index_list())), 
                 context__.vals_r("p_cfcov_54")[(pos__ - 1)], "assigning variable p_cfcov_54[(sym47__ - 1), (sym48__ - 1)]");
          current_statement__ = 15;
          pos__ = (pos__ + 1);}}
      current_statement__ = 15;
      assign(p_cfcov_54, nil_index_list(), cholesky_factor_free(p_cfcov_54), "assigning variable p_cfcov_54");
      Eigen::Matrix<double, -1, -1> p_cfcov_33;
      p_cfcov_33 = Eigen::Matrix<double, -1, -1>(3, 3);
      
      current_statement__ = 16;
      pos__ = 1;
      current_statement__ = 16;
      for (size_t sym49__ = 1; sym49__ <= 3; ++sym49__) {
        current_statement__ = 16;
        for (size_t sym48__ = 1; sym48__ <= 3; ++sym48__) {
          current_statement__ = 16;
          assign(p_cfcov_33, cons_list(index_uni(sym48__), cons_list(index_uni(sym49__), nil_index_list())), 
                 context__.vals_r("p_cfcov_33")[(pos__ - 1)], "assigning variable p_cfcov_33[(sym48__ - 1), (sym49__ - 1)]");
          current_statement__ = 16;
          pos__ = (pos__ + 1);}}
      current_statement__ = 16;
      assign(p_cfcov_33, nil_index_list(), cholesky_factor_free(p_cfcov_33), "assigning variable p_cfcov_33");
      std::vector<Eigen::Matrix<double, -1, -1>> p_cfcov_33_ar;
      p_cfcov_33_ar = std::vector<Eigen::Matrix<double, -1, -1>>(K, Eigen::Matrix<double, -1, -1>(3, 3));
      
      current_statement__ = 17;
      pos__ = 1;
      current_statement__ = 17;
      for (size_t sym51__ = 1; sym51__ <= 3; ++sym51__) {
        current_statement__ = 17;
        for (size_t sym50__ = 1; sym50__ <= 3; ++sym50__) {
          current_statement__ = 17;
          for (size_t sym49__ = 1; sym49__ <= K; ++sym49__) {
            current_statement__ = 17;
            assign(p_cfcov_33_ar, cons_list(index_uni(sym49__), cons_list(index_uni(sym50__), cons_list(index_uni(sym51__), nil_index_list()))), 
                   context__.vals_r("p_cfcov_33_ar")[(pos__ - 1)], "assigning variable p_cfcov_33_ar[(sym49__ - 1), (sym50__ - 1), (sym51__ - 1)]");
            current_statement__ = 17;
            pos__ = (pos__ + 1);}}}
      current_statement__ = 17;
      for (size_t sym49__ = 1; sym49__ <= K; ++sym49__) {
        current_statement__ = 17;
        assign(p_cfcov_33_ar, cons_list(index_uni(sym49__), nil_index_list()), cholesky_factor_free(
               rvalue(p_cfcov_33_ar, cons_list(index_uni(sym49__), nil_index_list()), "pretty printed e")), "assigning variable p_cfcov_33_ar[(sym49__ - 1)]");
      }
      vars__.push_back(p_real);
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        vars__.push_back(rvalue(p_real_1d_ar, cons_list(index_uni(sym43__), nil_index_list()), "pretty printed e"));
      }
      for (size_t sym45__ = 1; sym45__ <= K; ++sym45__) {
        for (size_t sym44__ = 1; sym44__ <= M; ++sym44__) {
          for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
            vars__.push_back(rvalue(p_real_3d_ar, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), nil_index_list()))), "pretty printed e"));
          }}}
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        vars__.push_back(rvalue(p_vec, cons_list(index_uni(sym43__), nil_index_list()), "pretty printed e"));
      }
      for (size_t sym44__ = 1; sym44__ <= N; ++sym44__) {
        for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
          vars__.push_back(rvalue(p_1d_vec, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym46__ = 1; sym46__ <= N; ++sym46__) {
        for (size_t sym45__ = 1; sym45__ <= K; ++sym45__) {
          for (size_t sym44__ = 1; sym44__ <= M; ++sym44__) {
            for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
              vars__.push_back(rvalue(p_3d_vec, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        vars__.push_back(rvalue(p_row_vec, cons_list(index_uni(sym43__), nil_index_list()), "pretty printed e"));
      }
      for (size_t sym44__ = 1; sym44__ <= N; ++sym44__) {
        for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
          vars__.push_back(rvalue(p_1d_row_vec, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym46__ = 1; sym46__ <= N; ++sym46__) {
        for (size_t sym45__ = 1; sym45__ <= K; ++sym45__) {
          for (size_t sym44__ = 1; sym44__ <= M; ++sym44__) {
            for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
              vars__.push_back(rvalue(p_3d_row_vec, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym46__ = 1; sym46__ <= 3; ++sym46__) {
        for (size_t sym45__ = 1; sym45__ <= 2; ++sym45__) {
          for (size_t sym44__ = 1; sym44__ <= 5; ++sym44__) {
            for (size_t sym43__ = 1; sym43__ <= 4; ++sym43__) {
              vars__.push_back(rvalue(p_ar_mat, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
        vars__.push_back(rvalue(p_simplex, cons_list(index_uni(sym43__), nil_index_list()), "pretty printed e"));
      }
      for (size_t sym44__ = 1; sym44__ <= N; ++sym44__) {
        for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
          vars__.push_back(rvalue(p_1d_simplex, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym46__ = 1; sym46__ <= N; ++sym46__) {
        for (size_t sym45__ = 1; sym45__ <= K; ++sym45__) {
          for (size_t sym44__ = 1; sym44__ <= M; ++sym44__) {
            for (size_t sym43__ = 1; sym43__ <= N; ++sym43__) {
              vars__.push_back(rvalue(p_3d_simplex, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), cons_list(index_uni(sym46__), nil_index_list())))), "pretty printed e"));
            }}}}
      for (size_t sym44__ = 1; sym44__ <= 4; ++sym44__) {
        for (size_t sym43__ = 1; sym43__ <= 5; ++sym43__) {
          vars__.push_back(rvalue(p_cfcov_54, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym44__ = 1; sym44__ <= 3; ++sym44__) {
        for (size_t sym43__ = 1; sym43__ <= 3; ++sym43__) {
          vars__.push_back(rvalue(p_cfcov_33, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), nil_index_list())), "pretty printed e"));
        }}
      for (size_t sym45__ = 1; sym45__ <= 3; ++sym45__) {
        for (size_t sym44__ = 1; sym44__ <= 3; ++sym44__) {
          for (size_t sym43__ = 1; sym43__ <= K; ++sym43__) {
            vars__.push_back(rvalue(p_cfcov_33_ar, cons_list(index_uni(sym43__), cons_list(index_uni(sym44__), cons_list(index_uni(sym45__), nil_index_list()))), "pretty printed e"));
          }}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

};
}
typedef mother_model_namespace::mother_model stan_model;


Warning: deprecated language construct used in 'mother.stan', line 60, column 21:
   -------------------------------------------------
    58:  
    59:    void unit_normal_lp(real u) {
    60:      increment_log_prob(normal_log(u,0,1));
                              ^
    61:      u ~ uniform(-100,100);
    62:    }
   -------------------------------------------------

increment_log_prob(...); is deprecated and will be removed in the future. Use target += ...; instead.


Warning: deprecated language construct used in 'mother.stan', line 184, column 20:
   -------------------------------------------------
   182:  
   183:    real foo_lp(real x) {
   184:      return x + get_lp();
                             ^
   185:    }
   186:  
   -------------------------------------------------

get_lp() function is deprecated. It will be removed in a future release. Use target() instead.

