  $ ../../../../../install/default/bin/stanc --print-cpp eight_schools_ncp.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace eight_schools_ncp_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {"Found before start of program.",
                                                      "At file eight_schools_ncp.stan, line 8, columns 2-10",
                                                      "At file eight_schools_ncp.stan, line 9, columns 2-20",
                                                      "At file eight_schools_ncp.stan, line 10, columns 2-22",
                                                      "At file eight_schools_ncp.stan, line 14, columns 2-16",
                                                      "At file eight_schools_ncp.stan, line 16, columns 4-41",
                                                      "At file eight_schools_ncp.stan, line 15, column 2 to line 16, column 41",
                                                      "At file eight_schools_ncp.stan, line 20, columns 2-20",
                                                      "At file eight_schools_ncp.stan, line 21, columns 2-21",
                                                      "At file eight_schools_ncp.stan, line 22, columns 2-29",
                                                      "At file eight_schools_ncp.stan, line 23, columns 2-27",
                                                      "At file eight_schools_ncp.stan, line 2, columns 2-17",
                                                      "At file eight_schools_ncp.stan, line 3, columns 2-12",
                                                      "At file eight_schools_ncp.stan, line 4, columns 2-25"};


class eight_schools_ncp_model : public prob_grad {

 private:
  int pos__;
  int J;
  std::vector<double> y;
  std::vector<double> sigma;
 
 public:
  ~eight_schools_ncp_model() { }
  
  static std::string model_name() { return "eight_schools_ncp_model"; }
  
  eight_schools_ncp_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "eight_schools_ncp_model_namespace::eight_schools_ncp_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      
      current_statement__ = 12;
      current_statement__ = 12;
      assign(J, nil_index_list(), context__.vals_i("J")[(1 - 1)], "assigning variable J");
      y = std::vector<double>(J, 0);
      
      current_statement__ = 13;
      pos__ = 1;
      current_statement__ = 13;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 13;
        assign(y, cons_list(index_uni(sym1__), nil_index_list()), context__.vals_r("y")
                                                                  [(pos__ - 1)], "assigning variable y[(sym1__ - 1)]");
        current_statement__ = 13;
        assign(pos__, nil_index_list(), (stan::model::deep_copy(pos__) + 1), "assigning variable pos__");
      }
      sigma = std::vector<double>(J, 0);
      
      current_statement__ = 14;
      pos__ = 1;
      current_statement__ = 14;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 14;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()), 
               context__.vals_r("sigma")[(pos__ - 1)], "assigning variable sigma[(sym1__ - 1)]");
        current_statement__ = 14;
        assign(pos__, nil_index_list(), (stan::model::deep_copy(pos__) + 1), "assigning variable pos__");
      }
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "J", J, 0);
      current_statement__ = 14;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_greater_or_equal(function__, "sigma[sym1__]",
                               rvalue(sigma, cons_list(index_uni(sym1__), nil_index_list()), "pretty printed e"),
                               0);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += 1;
    num_params_r__ += 1;
    num_params_r__ += J;
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "eight_schools_ncp_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ mu;
      
      current_statement__ = 2;
      assign(mu, nil_index_list(), in__.scalar(), "assigning variable mu");
      local_scalar_t__ tau;
      
      current_statement__ = 3;
      assign(tau, nil_index_list(), in__.scalar(), "assigning variable tau");
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        assign(tau, nil_index_list(), lb_constrain(tau, 0, lp__), "assigning variable tau");
      } else {
        current_statement__ = 3;
        assign(tau, nil_index_list(), lb_constrain(tau, 0), "assigning variable tau");
      }
      std::vector<local_scalar_t__> theta_tilde;
      theta_tilde = std::vector<local_scalar_t__>(J, 0);
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        assign(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(
               ), "assigning variable theta_tilde[(sym1__ - 1)]");}
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(J, 0);
      
      current_statement__ = 7;
      for (size_t j = 1; j <= J; ++j) {
        current_statement__ = 6;
        assign(theta, cons_list(index_uni(j), nil_index_list()), stan::math::fma(
               tau,
               rvalue(theta_tilde, cons_list(index_uni(j), nil_index_list()), "pretty printed e"),
               mu), "assigning variable theta[(j - 1)]");}
      {
        current_statement__ = 8;
        lp_accum__.add(normal_log<propto__>(mu, 0, 5));
        current_statement__ = 9;
        lp_accum__.add(cauchy_log<propto__>(tau, 0, 5));
        current_statement__ = 10;
        lp_accum__.add(normal_log<propto__>(theta_tilde, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(normal_log<propto__>(y, theta, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("mu");
    names__.push_back("tau");
    names__.push_back("theta_tilde");
    names__.push_back("theta");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(J);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "eight_schools_ncp_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      double mu;
      
      current_statement__ = 2;
      assign(mu, nil_index_list(), in__.scalar(), "assigning variable mu");
      double tau;
      
      current_statement__ = 3;
      assign(tau, nil_index_list(), in__.scalar(), "assigning variable tau");
      current_statement__ = 3;
      assign(tau, nil_index_list(), lb_constrain(tau, 0), "assigning variable tau");
      std::vector<double> theta_tilde;
      theta_tilde = std::vector<double>(J, 0);
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        assign(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(
               ), "assigning variable theta_tilde[(sym1__ - 1)]");}
      current_statement__ = 0;
      vars__.push_back(mu);
      current_statement__ = 0;
      vars__.push_back(tau);
      current_statement__ = 0;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 0;
        vars__.push_back(rvalue(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), "pretty printed e"));
      }
      std::vector<double> theta;
      theta = std::vector<double>(J, 0);
      
      current_statement__ = 0;
      if (emit_transformed_parameters__) {
        current_statement__ = 7;
        for (size_t j = 1; j <= J; ++j) {
          current_statement__ = 6;
          assign(theta, cons_list(index_uni(j), nil_index_list()), stan::math::fma(
                 tau,
                 rvalue(theta_tilde, cons_list(index_uni(j), nil_index_list()), "pretty printed e"),
                 mu), "assigning variable theta[(j - 1)]");}
        current_statement__ = 0;
        for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
          current_statement__ = 0;
          vars__.push_back(rvalue(theta, cons_list(index_uni(sym1__), nil_index_list()), "pretty printed e"));
        }
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "mu");
    param_names__.push_back(std::string() + "tau");
    for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.push_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.push_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "mu");
    param_names__.push_back(std::string() + "tau");
    for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
      {
        param_names__.push_back(std::string() + "theta_tilde" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        {
          param_names__.push_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& params_r__,
                       std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    stan::io::writer<double> writer__(params_r__, params_i__);
    std::vector<double> vals_r__;
    std::vector<int> vals_i__;
    
    try {
      int pos__;
      
      double mu;
      
      current_statement__ = 2;
      current_statement__ = 2;
      assign(mu, nil_index_list(), context__.vals_r("mu")[(1 - 1)], "assigning variable mu");
      double tau;
      
      current_statement__ = 3;
      current_statement__ = 3;
      assign(tau, nil_index_list(), context__.vals_r("tau")[(1 - 1)], "assigning variable tau");
      current_statement__ = 3;
      assign(tau, nil_index_list(), lb_free(tau, 0), "assigning variable tau");
      std::vector<double> theta_tilde;
      theta_tilde = std::vector<double>(J, 0);
      
      current_statement__ = 4;
      pos__ = 1;
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= J; ++sym1__) {
        current_statement__ = 4;
        assign(theta_tilde, cons_list(index_uni(sym1__), nil_index_list()), 
               context__.vals_r("theta_tilde")[(pos__ - 1)], "assigning variable theta_tilde[(sym1__ - 1)]");
        current_statement__ = 4;
        assign(pos__, nil_index_list(), (stan::model::deep_copy(pos__) + 1), "assigning variable pos__");
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

};
}

typedef eight_schools_ncp_model_namespace::eight_schools_ncp_model stan_model;

  $ ../../../../../install/default/bin/stanc --print-cpp one_var_per_block.stan

// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace one_var_per_block_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using stan::model::rvalue;
using stan::model::assign;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {"Found before start of program.",
                                                      "At file one_var_per_block.stan, line 13, columns 2-30",
                                                      "At file one_var_per_block.stan, line 14, columns 2-39",
                                                      "At file one_var_per_block.stan, line 15, columns 2-36",
                                                      "At file one_var_per_block.stan, line 18, columns 2-31",
                                                      "At file one_var_per_block.stan, line 19, columns 17-42",
                                                      "At file one_var_per_block.stan, line 19, columns 2-42",
                                                      "At file one_var_per_block.stan, line 27, columns 2-27",
                                                      "At file one_var_per_block.stan, line 28, columns 17-46",
                                                      "At file one_var_per_block.stan, line 28, columns 2-46",
                                                      "At file one_var_per_block.stan, line 22, columns 2-26",
                                                      "At file one_var_per_block.stan, line 23, columns 17-47",
                                                      "At file one_var_per_block.stan, line 23, columns 2-47",
                                                      "At file one_var_per_block.stan, line 24, columns 2-34",
                                                      "At file one_var_per_block.stan, line 5, columns 2-8",
                                                      "At file one_var_per_block.stan, line 6, columns 2-8",
                                                      "At file one_var_per_block.stan, line 7, columns 2-32",
                                                      "At file one_var_per_block.stan, line 10, columns 2-41",
                                                      "At file one_var_per_block.stan, line 2, columns 30-43",
                                                      "At file one_var_per_block.stan, line 2, columns 28-44"};

template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
udf1(const T0__& a, const T1__& b, std::ostream* pstream__) {
  typedef typename boost::math::tools::promote_args<T0__,
          T1__>::type local_scalar_t__;
  typedef local_scalar_t__ fun_return_scalar_t__;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 19;
    return (a + b);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(
          std::runtime_error(std::string("inside UDF udf1") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct udf1_functor__ {
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
operator()(const T0__& a, const T1__& b, std::ostream* pstream__)  const 
{
return udf1(a, b, pstream__);
}
};

class one_var_per_block_model : public prob_grad {

 private:
  int pos__;
  int N;
  int K;
  std::vector<Eigen::Matrix<double, -1, 1>> datavar;
  std::vector<std::vector<double>> tdatavar;
 
 public:
  ~one_var_per_block_model() { }
  
  static std::string model_name() { return "one_var_per_block_model"; }
  
  one_var_per_block_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : prob_grad(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "one_var_per_block_model_namespace::one_var_per_block_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      
      current_statement__ = 15;
      current_statement__ = 15;
      assign(N, nil_index_list(), context__.vals_i("N")[(1 - 1)], "assigning variable N");
      
      current_statement__ = 16;
      current_statement__ = 16;
      assign(K, nil_index_list(), context__.vals_i("K")[(1 - 1)], "assigning variable K");
      datavar = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 17;
      pos__ = 1;
      current_statement__ = 17;
      for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
        current_statement__ = 17;
        for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 17;
          assign(datavar, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), 
                 context__.vals_r("datavar")[(pos__ - 1)], "assigning variable datavar[(sym1__ - 1), (sym2__ - 1)]");
          current_statement__ = 17;
          assign(pos__, nil_index_list(), (stan::model::deep_copy(pos__) + 1), "assigning variable pos__");
        }}
      tdatavar = std::vector<std::vector<double>>(1, std::vector<double>(1, 0));
      
      current_statement__ = 18;
      tdatavar = {FnMakeArray__(2.0)};
      current_statement__ = 17;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 17;
        for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 17;
          current_statement__ = 17;
          check_greater_or_equal(function__, "datavar[sym1__, sym2__]",
                                 rvalue(datavar, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), "pretty printed e"),
                                 0);}}
      current_statement__ = 18;
      for (size_t sym1__ = 1; sym1__ <= 1; ++sym1__) {
        current_statement__ = 18;
        for (size_t sym2__ = 1; sym2__ <= 1; ++sym2__) {
          current_statement__ = 18;
          current_statement__ = 18;
          check_greater_or_equal(function__, "tdatavar[sym1__, sym2__]",
                                 rvalue(tdatavar, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), "pretty printed e"),
                                 0);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside ctor") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    num_params_r__ += K * N;
    num_params_r__ += K * (K + 1) * N * N;
    num_params_r__ += K * (K + 1) * (N + ((N * (N - 1)) / 2));
    
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "one_var_per_block_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> param;
      param = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 2;
        assign(param, cons_list(index_uni(sym1__), nil_index_list()), in__.vector(
               N), "assigning variable param[(sym1__ - 1)]");}
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 2;
        for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 2;
          if (jacobian__) {
            current_statement__ = 2;
            assign(param, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), lb_constrain(
                   rvalue(param, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), "pretty printed e"),
                   0, lp__), "assigning variable param[(sym1__ - 1), (sym2__ - 1)]");
          } else {
            current_statement__ = 2;
            assign(param, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), lb_constrain(
                   rvalue(param, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), "pretty printed e"),
                   0), "assigning variable param[(sym1__ - 1), (sym2__ - 1)]");
          }}}
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> matparam;
      matparam = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(K, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>((K + 1), Eigen::Matrix<local_scalar_t__, -1, -1>(N, N)));
      
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        for (size_t sym2__ = 1; sym2__ <= (K + 1); ++sym2__) {
          current_statement__ = 3;
          assign(matparam, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), in__.matrix(
                 N, N), "assigning variable matparam[(sym1__ - 1), (sym2__ - 1)]");
        }}
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        for (size_t sym2__ = 1; sym2__ <= (K + 1); ++sym2__) {
          current_statement__ = 3;
          for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
            current_statement__ = 3;
            for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
              current_statement__ = 3;
              if (jacobian__) {
                current_statement__ = 3;
                assign(matparam, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), lb_constrain(
                       rvalue(matparam, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), "pretty printed e"),
                       0, lp__), "assigning variable matparam[(sym1__ - 1), (sym2__ - 1), (sym3__ - 1),\n                            (sym4__ - 1)]");
              } else {
                current_statement__ = 3;
                assign(matparam, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), lb_constrain(
                       rvalue(matparam, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())))), "pretty printed e"),
                       0), "assigning variable matparam[(sym1__ - 1), (sym2__ - 1), (sym3__ - 1),\n                            (sym4__ - 1)]");
              }}}}}
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>> cov_matparam_sym1__;
      cov_matparam_sym1__ = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>>(K, std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>((K + 1), Eigen::Matrix<local_scalar_t__, -1, 1>((N + ((N * (N - 1)) / 2)))));
      
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>> cov_matparam;
      cov_matparam = std::vector<std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>>(K, std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>((K + 1), Eigen::Matrix<local_scalar_t__, -1, -1>(N, N)));
      
      current_statement__ = 4;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 4;
        for (size_t sym3__ = 1; sym3__ <= (K + 1); ++sym3__) {
          current_statement__ = 4;
          assign(cov_matparam_sym1__, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), in__.vector(
                 (N + ((N * (N - 1)) / 2))), "assigning variable cov_matparam_sym1__[(sym2__ - 1), (sym3__ - 1)]");
        }}
      current_statement__ = 4;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 4;
        for (size_t sym3__ = 1; sym3__ <= (K + 1); ++sym3__) {
          current_statement__ = 4;
          if (jacobian__) {
            current_statement__ = 4;
            assign(cov_matparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), cov_matrix_constrain(
                   rvalue(cov_matparam_sym1__, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), "pretty printed e"),
                   N, lp__), "assigning variable cov_matparam[(sym2__ - 1), (sym3__ - 1)]");
          } else {
            current_statement__ = 4;
            assign(cov_matparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), cov_matrix_constrain(
                   rvalue(cov_matparam_sym1__, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), "pretty printed e"),
                   N), "assigning variable cov_matparam[(sym2__ - 1), (sym3__ - 1)]");
          }}}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> tparam;
      tparam = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      
      current_statement__ = 7;
      for (size_t n = 1; n <= N; ++n) {
        current_statement__ = 6;
        assign(tparam, cons_list(index_uni(n), nil_index_list()), multiply(rvalue(param, cons_list(index_uni(n), nil_index_list()), "pretty printed e"), 2), "assigning variable tparam[(n - 1)]");
      }
      current_statement__ = 5;
      for (size_t sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 5;
        for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 5;
          current_statement__ = 5;
          check_greater_or_equal(function__, "tparam[sym1__, sym2__]",
                                 rvalue(tparam, cons_list(index_uni(sym1__), cons_list(index_uni(sym2__), nil_index_list())), "pretty printed e"),
                                 0);}}
      {
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> modellocal;
        modellocal = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
        
        current_statement__ = 13;
        for (size_t n = 1; n <= N; ++n) {
          current_statement__ = 12;
          assign(modellocal, cons_list(index_uni(n), nil_index_list()), multiply(rvalue(tparam, cons_list(index_uni(n), nil_index_list()), "pretty printed e"), 2), "assigning variable modellocal[(n - 1)]");
        }
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<false>(0, 0, 1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside log_prob") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("param");
    names__.push_back("matparam");
    names__.push_back("cov_matparam");
    names__.push_back("tparam");
    names__.push_back("gq");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back((K + 1));
    
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back((K + 1));
    
    dims__.push_back(N);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(K);
    
    dims__.push_back(N);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "one_var_per_block_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    
    try {
      std::vector<Eigen::Matrix<double, -1, 1>> param;
      param = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 2;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 2;
        assign(param, cons_list(index_uni(sym2__), nil_index_list()), in__.vector(
               N), "assigning variable param[(sym2__ - 1)]");}
      current_statement__ = 2;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 2;
        for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
          current_statement__ = 2;
          assign(param, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), lb_constrain(
                 rvalue(param, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), "pretty printed e"),
                 0), "assigning variable param[(sym2__ - 1), (sym3__ - 1)]");
        }}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> matparam;
      matparam = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(K, std::vector<Eigen::Matrix<double, -1, -1>>((K + 1), Eigen::Matrix<double, -1, -1>(N, N)));
      
      current_statement__ = 3;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 3;
        for (size_t sym3__ = 1; sym3__ <= (K + 1); ++sym3__) {
          current_statement__ = 3;
          assign(matparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), in__.matrix(
                 N, N), "assigning variable matparam[(sym2__ - 1), (sym3__ - 1)]");
        }}
      current_statement__ = 3;
      for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
        current_statement__ = 3;
        for (size_t sym3__ = 1; sym3__ <= (K + 1); ++sym3__) {
          current_statement__ = 3;
          for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
            current_statement__ = 3;
            for (size_t sym5__ = 1; sym5__ <= N; ++sym5__) {
              current_statement__ = 3;
              assign(matparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), lb_constrain(
                     rvalue(matparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), "pretty printed e"),
                     0), "assigning variable matparam[(sym2__ - 1), (sym3__ - 1), (sym4__ - 1),\n                            (sym5__ - 1)]");
            }}}}
      std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> cov_matparam_sym2__;
      cov_matparam_sym2__ = std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(K, std::vector<Eigen::Matrix<double, -1, 1>>((K + 1), Eigen::Matrix<double, -1, 1>((N + ((N * (N - 1)) / 2)))));
      
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> cov_matparam;
      cov_matparam = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(K, std::vector<Eigen::Matrix<double, -1, -1>>((K + 1), Eigen::Matrix<double, -1, -1>(N, N)));
      
      current_statement__ = 4;
      for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
        current_statement__ = 4;
        for (size_t sym4__ = 1; sym4__ <= (K + 1); ++sym4__) {
          current_statement__ = 4;
          assign(cov_matparam_sym2__, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())), in__.vector(
                 (N + ((N * (N - 1)) / 2))), "assigning variable cov_matparam_sym2__[(sym3__ - 1), (sym4__ - 1)]");
        }}
      current_statement__ = 4;
      for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
        current_statement__ = 4;
        for (size_t sym4__ = 1; sym4__ <= (K + 1); ++sym4__) {
          current_statement__ = 4;
          assign(cov_matparam, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())), cov_matrix_constrain(
                 rvalue(cov_matparam_sym2__, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())), "pretty printed e"),
                 N), "assigning variable cov_matparam[(sym3__ - 1), (sym4__ - 1)]");
        }}
      current_statement__ = 0;
      for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
        current_statement__ = 0;
        for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
          current_statement__ = 0;
          vars__.push_back(rvalue(param, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), "pretty printed e"));
        }}
      current_statement__ = 0;
      for (size_t sym5__ = 1; sym5__ <= N; ++sym5__) {
        current_statement__ = 0;
        for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
          current_statement__ = 0;
          for (size_t sym3__ = 1; sym3__ <= (K + 1); ++sym3__) {
            current_statement__ = 0;
            for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
              current_statement__ = 0;
              vars__.push_back(rvalue(matparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), "pretty printed e"));
            }}}}
      current_statement__ = 0;
      for (size_t sym5__ = 1; sym5__ <= N; ++sym5__) {
        current_statement__ = 0;
        for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
          current_statement__ = 0;
          for (size_t sym3__ = 1; sym3__ <= (K + 1); ++sym3__) {
            current_statement__ = 0;
            for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
              current_statement__ = 0;
              vars__.push_back(rvalue(cov_matparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())))), "pretty printed e"));
            }}}}
      std::vector<Eigen::Matrix<double, -1, 1>> tparam;
      tparam = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 0;
      if (emit_transformed_parameters__) {
        current_statement__ = 5;
        for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
          current_statement__ = 5;
          for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
            current_statement__ = 5;
            current_statement__ = 5;
            check_greater_or_equal(function__, "tparam[sym2__, sym3__]",
                                   rvalue(tparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), "pretty printed e"),
                                   0);}}
        current_statement__ = 7;
        for (size_t n = 1; n <= N; ++n) {
          current_statement__ = 6;
          assign(tparam, cons_list(index_uni(n), nil_index_list()), multiply(rvalue(param, cons_list(index_uni(n), nil_index_list()), "pretty printed e"), 2), "assigning variable tparam[(n - 1)]");
        }
        current_statement__ = 0;
        for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
          current_statement__ = 0;
          for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 0;
            vars__.push_back(rvalue(tparam, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), "pretty printed e"));
          }}
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> gq;
      gq = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 0;
      if (emit_generated_quantities__) {
        current_statement__ = 8;
        for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
          current_statement__ = 8;
          for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
            current_statement__ = 8;
            current_statement__ = 8;
            check_greater_or_equal(function__, "gq[sym2__, sym3__]",
                                   rvalue(gq, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), "pretty printed e"),
                                   0);}}
        current_statement__ = 10;
        for (size_t n = 1; n <= N; ++n) {
          current_statement__ = 9;
          assign(gq, cons_list(index_uni(n), nil_index_list()), add(rvalue(tparam, cons_list(index_uni(n), nil_index_list()), "pretty printed e"), rvalue(param, cons_list(index_uni(n), nil_index_list()), "pretty printed e")), "assigning variable gq[(n - 1)]");
        }
        current_statement__ = 0;
        for (size_t sym3__ = 1; sym3__ <= N; ++sym3__) {
          current_statement__ = 0;
          for (size_t sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 0;
            vars__.push_back(rvalue(gq, cons_list(index_uni(sym2__), cons_list(index_uni(sym3__), nil_index_list())), "pretty printed e"));
          }}
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside write_array") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
      {
        for (size_t sym5__ = 1; sym5__ <= K; ++sym5__) {
          {
            param_names__.push_back(std::string() + "param" + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
          }}
      }}
    for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
      {
        for (size_t sym5__ = 1; sym5__ <= N; ++sym5__) {
          {
            for (size_t sym6__ = 1; sym6__ <= (K + 1); ++sym6__) {
              {
                for (size_t sym7__ = 1; sym7__ <= K; ++sym7__) {
                  {
                    param_names__.push_back(std::string() + "matparam" + '.' + std::to_string(sym7__) + '.' + std::to_string(sym6__) + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
                  }}
              }}
          }}
      }}
    for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
      {
        for (size_t sym5__ = 1; sym5__ <= N; ++sym5__) {
          {
            for (size_t sym6__ = 1; sym6__ <= (K + 1); ++sym6__) {
              {
                for (size_t sym7__ = 1; sym7__ <= K; ++sym7__) {
                  {
                    param_names__.push_back(std::string() + "cov_matparam" + '.' + std::to_string(sym7__) + '.' + std::to_string(sym6__) + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
                  }}
              }}
          }}
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        {
          for (size_t sym5__ = 1; sym5__ <= K; ++sym5__) {
            {
              param_names__.push_back(std::string() + "tparam" + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        {
          for (size_t sym5__ = 1; sym5__ <= K; ++sym5__) {
            {
              param_names__.push_back(std::string() + "gq" + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
      {
        for (size_t sym5__ = 1; sym5__ <= K; ++sym5__) {
          {
            param_names__.push_back(std::string() + "param" + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
          }}
      }}
    for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
      {
        for (size_t sym5__ = 1; sym5__ <= N; ++sym5__) {
          {
            for (size_t sym6__ = 1; sym6__ <= (K + 1); ++sym6__) {
              {
                for (size_t sym7__ = 1; sym7__ <= K; ++sym7__) {
                  {
                    param_names__.push_back(std::string() + "matparam" + '.' + std::to_string(sym7__) + '.' + std::to_string(sym6__) + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
                  }}
              }}
          }}
      }}
    for (size_t sym4__ = 1; sym4__ <= (N + ((N * (N - 1)) / 2)); ++sym4__) {
      {
        for (size_t sym5__ = 1; sym5__ <= (K + 1); ++sym5__) {
          {
            for (size_t sym6__ = 1; sym6__ <= K; ++sym6__) {
              {
                param_names__.push_back(std::string() + "cov_matparam" + '.' + std::to_string(sym6__) + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
              }}
          }}
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        {
          for (size_t sym5__ = 1; sym5__ <= K; ++sym5__) {
            {
              param_names__.push_back(std::string() + "tparam" + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        {
          for (size_t sym5__ = 1; sym5__ <= K; ++sym5__) {
            {
              param_names__.push_back(std::string() + "gq" + '.' + std::to_string(sym5__) + '.' + std::to_string(sym4__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& params_r__,
                       std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    stan::io::writer<double> writer__(params_r__, params_i__);
    std::vector<double> vals_r__;
    std::vector<int> vals_i__;
    
    try {
      int pos__;
      
      std::vector<Eigen::Matrix<double, -1, 1>> param;
      param = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(N));
      
      current_statement__ = 2;
      pos__ = 1;
      current_statement__ = 2;
      for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
        current_statement__ = 2;
        for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
          current_statement__ = 2;
          assign(param, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())), 
                 context__.vals_r("param")[(pos__ - 1)], "assigning variable param[(sym3__ - 1), (sym4__ - 1)]");
          current_statement__ = 2;
          assign(pos__, nil_index_list(), (stan::model::deep_copy(pos__) + 1), "assigning variable pos__");
        }}
      current_statement__ = 2;
      for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
        current_statement__ = 2;
        for (size_t sym4__ = 1; sym4__ <= N; ++sym4__) {
          current_statement__ = 2;
          assign(param, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())), lb_free(
                 rvalue(param, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), nil_index_list())), "pretty printed e"),
                 0), "assigning variable param[(sym3__ - 1), (sym4__ - 1)]");
        }}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> matparam;
      matparam = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(K, std::vector<Eigen::Matrix<double, -1, -1>>((K + 1), Eigen::Matrix<double, -1, -1>(N, N)));
      
      current_statement__ = 3;
      pos__ = 1;
      current_statement__ = 3;
      for (size_t sym6__ = 1; sym6__ <= N; ++sym6__) {
        current_statement__ = 3;
        for (size_t sym5__ = 1; sym5__ <= N; ++sym5__) {
          current_statement__ = 3;
          for (size_t sym4__ = 1; sym4__ <= (K + 1); ++sym4__) {
            current_statement__ = 3;
            for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
              current_statement__ = 3;
              assign(matparam, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), nil_index_list())))), 
                     context__.vals_r("matparam")[(pos__ - 1)], "assigning variable matparam[(sym3__ - 1), (sym4__ - 1), (sym5__ - 1),\n                            (sym6__ - 1)]");
              current_statement__ = 3;
              assign(pos__, nil_index_list(), (stan::model::deep_copy(
                     pos__) + 1), "assigning variable pos__");}}}}
      current_statement__ = 3;
      for (size_t sym3__ = 1; sym3__ <= K; ++sym3__) {
        current_statement__ = 3;
        for (size_t sym4__ = 1; sym4__ <= (K + 1); ++sym4__) {
          current_statement__ = 3;
          for (size_t sym5__ = 1; sym5__ <= N; ++sym5__) {
            current_statement__ = 3;
            for (size_t sym6__ = 1; sym6__ <= N; ++sym6__) {
              current_statement__ = 3;
              assign(matparam, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), nil_index_list())))), lb_free(
                     rvalue(matparam, cons_list(index_uni(sym3__), cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), nil_index_list())))), "pretty printed e"),
                     0), "assigning variable matparam[(sym3__ - 1), (sym4__ - 1), (sym5__ - 1),\n                            (sym6__ - 1)]");
            }}}}
      std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> cov_matparam;
      cov_matparam = std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(K, std::vector<Eigen::Matrix<double, -1, -1>>((K + 1), Eigen::Matrix<double, -1, -1>(N, N)));
      
      current_statement__ = 4;
      pos__ = 1;
      current_statement__ = 4;
      for (size_t sym7__ = 1; sym7__ <= N; ++sym7__) {
        current_statement__ = 4;
        for (size_t sym6__ = 1; sym6__ <= N; ++sym6__) {
          current_statement__ = 4;
          for (size_t sym5__ = 1; sym5__ <= (K + 1); ++sym5__) {
            current_statement__ = 4;
            for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
              current_statement__ = 4;
              assign(cov_matparam, cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), cons_list(index_uni(sym6__), cons_list(index_uni(sym7__), nil_index_list())))), 
                     context__.vals_r("cov_matparam")[(pos__ - 1)], "assigning variable cov_matparam[(sym4__ - 1), (sym5__ - 1), (sym6__ - 1),\n                                (sym7__ - 1)]");
              current_statement__ = 4;
              assign(pos__, nil_index_list(), (stan::model::deep_copy(
                     pos__) + 1), "assigning variable pos__");}}}}
      current_statement__ = 4;
      for (size_t sym4__ = 1; sym4__ <= K; ++sym4__) {
        current_statement__ = 4;
        for (size_t sym5__ = 1; sym5__ <= (K + 1); ++sym5__) {
          current_statement__ = 4;
          assign(cov_matparam, cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())), cov_matrix_free(
                 rvalue(cov_matparam, cons_list(index_uni(sym4__), cons_list(index_uni(sym5__), nil_index_list())), "pretty printed e")), "assigning variable cov_matparam[(sym4__ - 1), (sym5__ - 1)]");
        }}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(
          std::runtime_error(std::string("inside transform_inits") + ": " + e.what()), locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

};
}

typedef one_var_per_block_model_namespace::one_var_per_block_model stan_model;

