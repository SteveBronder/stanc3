open Frontend
open Core_kernel
open Debug_data_generation

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|       data {
                  int<lower=7> K;
                  int<lower=1> D;
                  int<lower=0> N;
                  int<lower=0,upper=1> y[N,D];
                  vector[K] x[N];
                    }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "K <- 31\
      \nD <- 23\
      \nN <- 23\
      \ny <- structure(c(0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1), .Dim=c(23, 23))\
      \nx <- structure(c(5.6970099318339757, 3.699555011617754, 4.5400094500275188, 6.8413806364791148, 5.3381565308059722, 5.751519240322911, 5.6346532322171932, 2.8948347522885491, 3.2646373101402624, 4.7970536895150113, 5.3447613288106783, 2.1683594498263647, 4.3016324664898411, 6.1770427075554, 6.8110752756996069, 4.8936480581273667, 6.4792003466452428, 2.5961312142560891, 5.91945257450765, 6.6050513840303076, 2.9274408229410245, 3.2655363162576938, 2.2808115955612753, 4.6608262075590616, 4.2012853867216542, 6.8461119648757283, 3.6657814791024035, 2.2999493534807427, 5.8992221150534618, 3.7807833299754168, 6.2391027066401064, 4.4534128771489758, 6.2140849240285876, 4.6017246482406282, 3.8033219432030858, 4.9652161295524673, 4.9625551609248646, 6.8601554930793025, 5.1956669070064772, 6.0294745777074112, 3.2103222538744269, 2.6878313459671612, 6.8617709255561756, 3.2669378222838024, 5.2152658918671513, 5.7844240827270923, 2.4374554130794062, 5.6941138068758548, 3.9044277958027327, 4.3724199122444363, 2.95135591186968, 5.47513176559102, 6.5364781517198685, 4.3824054139724629, 5.7432193056321221, 2.5015602329088598, 6.8997525033629916, 5.8279412802947821, 2.9286261155278175, 3.1957792972404051, 3.7245649848406677, 2.7126609435175997, 4.55835036490185, 4.333603907990577, 4.9298508305726418, 2.7097064677929277, 5.45522798518373, 6.6667584707072063, 5.7294220698501919, 3.3383050990013747, 4.5230213241698127, 5.4879666350488527, 6.8455292108608585, 4.25942865723033, 2.7788148907628667, 4.5708766839372856, 2.2534095371412048, 6.3249108624505634, 4.2853722409435608, 2.0308236068195997, 3.9388427794597383, 6.0084710699432637, 3.8340305073172294, 2.8563447232994426, 2.5388514265689763, 4.7058637423126459, 2.4888488105047935, 2.5443694346433, 5.9985141591821742, 5.6068588336669745, 3.5492230777974845, 5.4959759376053512, 2.3176564007841614, 4.6567289745757519, 5.3133421565784147, 5.2131293366640641, 3.1623487674335622, 2.8034375778835043, 3.9368166749896965, 3.7441929591301, 4.778611882016417, 6.817728926395338, 6.573639096941486, 2.1990869716883137, 3.05717041460045, 3.8468713415151181, 2.7132162003168792, 2.6495893220666793, 5.1267291747559778, 4.939047516943142, 6.865900636787873, 6.2974394364929509, 2.5130226087767631, 4.8086992665280608, 6.0280573884264239, 3.9544749355768434, 4.9373819723512291, 6.6048289476191515, 5.0197268874597381, 4.4351842083922239, 4.9663870217044153, 6.57519553555511, 5.2243813891211133, 4.9247639923009263, 4.0119760458255911, 6.5044245652318793, 5.4137852832700286, 4.0855809338778553, 5.474593812871384, 5.6933292286716668, 2.4038086660222118, 3.0290496350764871, 3.35635732579469, 6.9574575726424346, 4.2218626120434539, 5.6313260049417373, 3.1688003559532727, 6.1739309416285186, 4.9321924718937673, 2.9902781781015948, 4.2517866199137631, 6.2283827413927053, 5.3301947568001626, 2.0687605273351592, 3.0510157900042607, 6.724558743925912, 2.8486247886191456, 2.369379267528871, 2.9553006285082031, 4.7595014027623952, 3.947492100714002, 2.3821941246800962, 3.256728291679897, 6.89299940753575, 5.2638356428090276, 2.8166329684442459, 6.9395520060568865, 3.0435392222569435, 3.1936177348103407, 2.4065281488912276, 6.749858339696539, 4.1564786086622778, 3.5490073180482606, 2.4158606696880471, 4.0468963236772462, 5.53652603638678, 5.7782931792360586, 2.7057751355436372, 2.9914792315182415, 5.7878203616676682, 4.1159148557056024, 4.1383562506040494, 3.2198698343621266, 4.1575389669910994, 6.5620441036692281, 3.7301174493282172, 6.214669485301858, 5.5167315042726512, 2.556795325592625, 2.3048774374630812, 2.6117878186550221, 3.2256623277715644, 6.4483315125500127, 6.23489544682429, 4.0430940444870211, 2.32803362219721, 3.9832036349079876, 5.3979408839204206, 2.4501144038231373, 2.1127300544772458, 6.7766128937816728, 4.8292598781604115, 3.849412514140425, 5.3761839541171286, 4.1705270552403189, 3.8121395921433834, 4.5509079001874362, 5.6361591331786318, 4.4078015997672884, 3.9215990988288558, 2.5994576898058539, 2.3517751744813964, 5.3207918298852146, 3.6748870584443756, 6.2299974986024056, 6.6075509615516861, 4.9440328621616665, 6.5651904569325383, 2.4827832080993804, 3.3772173594700603, 4.5330606723379887, 4.5342983063748434, 6.8448424503151344, 6.8737790612170411, 5.9181361108934549, 6.2326919690887816, 3.7995900204866864, 4.6562991276984151, 4.2740364569215146, 2.9263498052061969, 2.6827190155902971, 6.6684967148897556, 6.14478987000376, 6.0644673038062917, 6.6153290691167967, 5.183104931389332, 4.4202866991431105, 4.8569657769574759, 3.4497652328054422, 2.936252917373138, 2.4475984510396867, 2.7143560945126963, 6.0939666014440244, 5.4308129244147336, 4.6382842336018282, 5.5406102756890849, 4.58558107182896, 3.7334184805357027, 4.4243651206398855, 4.6276931600633695, 5.9775692619943728, 6.33186764647894, 6.7754374717720065, 3.4938722197801413, 2.690059455343853, 2.3363326318492668, 2.4117257406205264, 4.108997429386438, 2.2475851259908506, 2.3326292364851664, 3.8688702739617544, 6.1991933552595579, 3.0590905157857673, 3.6187128423867034, 3.0546631643964459, 6.90447169214921, 5.28243818173868, 5.577350634399914, 4.9972366385376414, 6.2789427584113815, 2.8564022274539118, 4.9397042549840595, 4.13224614788779, 2.9421878733202886, 6.145023876645757, 5.4609245714415309, 6.2038432641823178, 3.6610817535099449, 4.9734072229235053, 3.1830747462348832, 4.5743164316100078, 5.6766897900014595, 5.860672562357502, 4.9446708587125716, 5.8489341953852794, 6.5607115387804251, 3.8664551629722004, 6.8330838403406871, 5.2546853218238017, 2.0340763620486308, 3.9825710497834854, 6.1378872562941513, 4.3115454383739333, 2.4639942539535031, 3.2187009828685276, 3.0531365682933718, 5.6065721424031567, 5.7565235402021857, 4.6808287852602772, 3.4589722043689113, 4.0375480046320522, 5.9371533836265087, 2.3383812364297722, 5.2943517512586045, 3.9682677159630959, 2.2407741934947278, 3.030217804905007, 3.0886070461207646, 4.9638973203356027, 2.2283430417447203, 5.67410848855914, 5.9805154679322685, 6.34357268498792, 2.8210621246297238, 6.1567087821171471, 6.98229667664697, 2.644280617397496, 3.2155934413627065, 5.3736456859120656, 4.7170349400790776, 5.2607115938140208, 3.2118237239353062, 2.0813873133146381, 2.4574149401315895, 4.0963163641937719, 6.7964483490072816, 6.8821825127628982, 5.4366867881636018, 5.8201346540647751, 2.5587630530430152, 6.5860642422876232, 4.7507619264318128, 2.6663878426072638, 4.2769306427392806, 4.7532009961119517, 6.1656750755437111, 6.8454523144519044, 4.3282922165842415, 3.139550850498952, 6.0259757865573569, 4.3021016795559683, 2.9022214129730224, 3.73154375426368, 3.6733540952382455, 5.7294453284371789, 3.8160424304887246, 2.7088875146207489, 3.8923614690711692, 4.1611360543659881, 3.6527823298133484, 2.9473856006139778, 4.7950782884127365, 2.4250332638079009, 2.1104330803498073, 6.8774182200634231, 4.8210096689524713, 2.3757260750254954, 5.5339813413666414, 3.69563202775792, 4.076963753834475, 5.230724059413963, 4.363573293288213, 6.27343863850654, 2.1517084716428414, 6.928921178920743, 3.5900841206135925, 6.0610204935883507, 5.3816574949967251, 4.7422508902169156, 2.0606246674551203, 2.8816460302183051, 2.5866514933243057, 5.2353409278254688, 6.2773179852869578, 6.891912739169336, 5.3229325934958887, 4.5817274957819469, 3.2966769458878371, 2.6811265556335675, 5.9483571731921163, 3.1058150607663713, 5.1086699354467138, 6.2837166916005671, 5.8493712304184839, 4.4736389500256415, 4.9265700640106633, 5.9184797439512593, 5.5010045884769552, 6.4429968730230494, 2.8666081974663689, 2.0273618187432656, 4.3984486036697792, 4.9974302020954422, 4.3077607554260275, 6.7678408396822842, 5.0810892650205783, 4.7131716756597779, 2.5474005901900068, 2.697030937453138, 4.2231483128257308, 5.9446298086168063, 6.9817976282945722, 3.6329403862453926, 3.857925203464867, 2.6572466967857671, 6.3861756913022, 3.4214276715260823, 4.86460321056359, 6.5872782581516027, 5.6805858094398225, 5.53268203237239, 3.966043088520375, 3.7639007607352086, 4.742640835674452, 4.0996380314375376, 4.1750449209698974, 5.8447794163484375, 4.9757438701096977, 2.2985783449004424, 6.5353730109113952, 2.0500462750482158, 2.4506353956590745, 5.6768205381829935, 4.9513112091884874, 5.5857253124010278, 6.2169203695170454, 3.3664832843744317, 2.8957904988799164, 2.6778587919739358, 5.4259031039890253, 4.5480902416003666, 2.4123510504448507, 5.01169103896434, 4.3687905700522656, 2.6031796212494429, 4.7579222315922163, 4.1103670444687124, 2.2408263405144413, 4.8761531386612935, 4.487260415141801, 4.7019570491738865, 5.8452237955849258, 6.9133443492149205, 6.0961573254976749, 5.572844112778677, 2.3928805341959438, 5.2893439408826346, 5.15670281178106, 6.0558558544719006, 4.9092746347369864, 5.3456687156856066, 3.9377744716678125, 5.3592077444271116, 3.4392155683205896, 6.1065456385190009, 3.0581566331750256, 6.6839996738171354, 4.1986996263928029, 4.1038055535978026, 6.0246641305354505, 5.7635665122275572, 6.5666746122405595, 4.3477003293973615, 4.6990618798086654, 3.9506471614970105, 3.4895025344100787, 2.62658766398376, 3.0457185138250096, 3.4173079711023391, 4.7087577854138232, 3.4538863757810461, 4.9024539703077767, 5.6727739155821908, 2.3081033030446436, 6.4562324326421594, 6.6462726194237982, 2.581097088586001, 5.1725237308777388, 3.623858498123818, 3.8623152511537411, 4.60784762940356, 2.4644582634127867, 4.8080859172466521, 6.4409806720017224, 4.555566314702209, 3.481324522669853, 6.6628223439284531, 6.8413788731462484, 2.3532511484216343, 6.285673042642677, 5.095991785455432, 5.9856450654057172, 2.626050077873975, 3.9151907224785782, 6.0618711730935111, 3.3710195691399591, 5.2131575970213442, 5.7530232809234558, 4.25818909635951, 6.358151175401578, 4.4990376049916634, 5.9508414145460611, 6.1084848941481251, 2.2557627851959796, 4.3507271063833945, 4.4973016953637792, 3.9821706271915231, 4.84159915135052, 4.5907442841994559, 3.9835795717124354, 2.0119088095333026, 2.1264631429798904, 5.0806732138327551, 4.819664180497031, 6.2705525103220827, 5.6646807000036627, 3.6642056711505062, 2.9229874594477137, 3.8329858148512215, 5.466092617475808, 4.1202231319404925, 3.9702963525545716, 5.7559941746704677, 4.2590533077834349, 2.5528648624232986, 3.131929215729798, 5.1554347297829555, 3.9970641466645658, 4.0237756106813531, 3.0400663239606707, 5.6871812989740054, 5.786636967137869, 2.6947111655165745, 3.924326888677002, 2.0893682463235748, 3.2106748496253896, 3.7921414456432379, 4.9139989511611653, 2.0246188778131295, 3.5726258208840305, 2.9709505724101684, 6.1911093787770657, 5.684144245857361, 5.4319994045996527, 2.0070199171900573, 2.5835142470552155, 5.16185133580134, 3.9917100782065926, 4.8327815679972375, 6.8591982842372943, 2.5203104846601958, 2.5148691716322009, 6.6904786930838664, 3.0380008295606151, 3.8701308157109224, 6.2132487227857949, 2.7220990098963735, 2.8050246445752451, 6.5821881269769049, 4.7029142409736631, 2.3833428869971365, 6.33532363503039, 5.560421325500327, 4.5259016437478223, 4.8484991608419667, 4.6132654005411986, 2.855244603515537, 2.9785442073713009, 4.9975215305215022, 2.6060408756408004, 6.231434767650696, 3.682707436983705, 4.1942294069837018, 4.8914926074338512, 6.47136579802636, 5.5166653475674092, 3.4024642931447593, 4.0965822219797614, 3.6721130759275815, 3.9699293077371745, 3.8191253650365189, 5.7249831470206995, 2.6571850811367623, 5.6561554998082979, 2.4602857667204185, 4.9256004434181992, 6.8638844711832911, 3.4308499632269349, 5.89638011118171, 2.9952591892581584, 4.897009349457722, 4.8410476548993646, 3.9677191081000154, 6.6256611819470743, 2.128265779956577, 5.2004070169743839, 5.880376312710947, 5.2796503969757111, 4.8370411599880274, 6.4487394581910813, 4.7996044304729573, 3.5576623434360077, 6.0802460157640743, 2.7936968793603736, 3.421338096539345, 4.1125189849099524, 6.0833376576836429, 3.7899412613464305, 5.3611138572793866, 2.2527329589711913, 5.1402664312957329, 5.5362674313192839, 2.7420894823415782, 5.7022428318907048, 6.724484689255176, 2.2320873698960892, 5.043909460954354, 4.367037294947469, 2.9900821391281256, 6.5498079933549693, 4.8016890477287184, 4.0964801281114855, 4.7594503985825956, 5.6034914571702, 4.6816683190329833, 2.6740708821754748, 4.1954254349482314, 3.9951771506900031, 4.02234402163112, 4.0361759795433887, 2.8271046390801025, 3.994829015830331, 2.6447629299622473, 3.5463777486975827, 5.4457214689566005, 4.1759016917457332, 2.088824235054481, 6.9970542847637214, 3.8469107019712374, 3.58215231461428, 6.737634303442908, 5.6782331852021759, 5.8645964180304766, 2.2376785056919459, 4.8128268197795876, 2.7819860423013694, 6.6605289511542649, 4.8543046922838666, 3.2177363023594507, 6.2850234486561805, 3.3300973141614088, 5.4042931681306969, 2.8815964383729664, 3.8770244677282171, 2.1247659083850086, 3.9654516536531315, 6.6362190104648269, 2.7246409502945927, 5.2530487558727161, 6.5315010074828823, 5.8827693168610242, 3.8906067147183823, 4.8843862359470229, 6.6092549013255226, 2.992070931295455, 4.1048888790254274, 4.9191520187789646, 3.19425036011864, 2.0474388856619883, 2.9622464241043271, 2.8045940231432787, 3.8262316539912766, 2.1176223228211013, 3.5088879098246126, 5.7771444236054812, 3.9040417227761872, 2.9712214629170539, 6.31142247857119, 2.809599556228596, 6.0770532451696209, 6.9532028863892581, 4.2193440878595352, 5.563774868886842, 4.3792090063539355, 3.2696669154648275, 5.6810632205446137, 6.43563755979542, 2.9066357429676994, 5.83499074634201, 3.019828345998651, 4.4160120744831213, 3.407066077471987, 2.4577076965601115, 4.391491398603014, 4.9999933007441015, 4.4928980835446186, 6.5371710369369405, 4.0332803141154265, 2.3628321591470103, 4.1327038846960669, 5.1935143157721395, 3.9712204953562011, 5.7435383565842937, 6.1008971052343748, 6.5751246715022367, 2.87601433073287, 6.5268447820335735, 5.8369597405978659, 2.39822462053123, 3.7726694975149218, 5.43100564699971, 6.6842996588648358, 6.8684779189590719, 5.4260117036424056, 2.5631734102950148, 2.387680873311441, 5.5894455919307706, 6.87431278265179, 6.3239742714534986, 3.7695045801885083, 3.74756218682307, 3.9543630194547639, 2.7554230024356752), .Dim=c(23, 31))" |}]

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|       data {
                    int x[3, 4];
                    int y[5, 2, 4];
                    matrix[3, 4] z;
                    vector[3] w;
                    vector[3] p[4];
                }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "x <- structure(c(24, 22, 23, 20, 23, 23, 22, 23, 24, 23, 21, 20), .Dim=c(3, 4))\
      \ny <- structure(c(21, 20, 21, 23, 20, 21, 20, 21, 20, 22, 21, 24, 23, 20, 22, 21, 20, 20, 23, 21, 23, 24, 20, 23, 22, 24, 22, 23, 23, 20, 20, 24, 20, 24, 23, 23, 21, 20, 20, 21), .Dim=c(5, 2, 4))\
      \nz <- structure(c(2.6451502425447266, 3.2425011320285027, 3.5720962307677091, 5.7213345511646363, 4.0319385317762162, 2.3295401414257744, 3.8281495864625956, 4.869813970717308, 3.7293083759369448, 6.97070615398329, 4.1512076186352216, 4.1949090422787174), .Dim=c(3, 4))\
      \nw <- c(6.8138349711922652, 4.9461191671001892, 4.7922353997475788)\
      \np <- structure(c(2.292622453020976, 3.226595023801782, 3.8556222147542085, 2.0095894885098069, 5.2448759493135153, 4.0434169569431706, 5.7759384905058795, 4.2138065257931459, 4.6676412390878905, 6.5986584016153875, 6.4287706833617158, 3.19883563012539), .Dim=c(4, 3))" |}]

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|       data {
                  int<lower=2, upper=4> K;
                  int<lower=K, upper=K> D;
                  vector[K - 1] x;
                  vector[K * D] y;
                  vector[K ? D : K] z;
                  vector[K ? D : K] w[(D + 2 == K) + 3];
                }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "K <- 2\
      \nD <- 2\
      \nx <- c(6.8017664359959342)\
      \ny <- c(4.8441784126802627, 4.25312636944623, 5.2015419032442969, 2.7103944900448411)\
      \nz <- c(3.3282621325833865, 2.56799363086151)\
      \nw <- structure(c(4.0759938356540726, 3.604405750889411, 6.0288479433993629, 3.543689144366625, 4.1465170437036338, 5.8799711085519224), .Dim=c(3, 2))" |}]

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|
        data {
          corr_matrix[5] d;
          cov_matrix[4] e;
          cholesky_factor_cov[4] f;
          cholesky_factor_corr[4] g;
          unit_vector[4] h;
          simplex[12] i;
          ordered[2] j;
          positive_ordered[4] k;
          cholesky_factor_cov[5, 4] l;
        }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "d <- structure(c(1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.), .Dim=c(5, 5))\
      \ne <- structure(c(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(4, 4))\
      \nf <- structure(c(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(4, 4))\
      \ng <- structure(c(1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(4, 4))\
      \nh <- c(0.3407724101929635, 0.75007501926931519, 0.44428382890598478, 0.35195668667046631)\
      \ni <- c(0.13400440686830675, 0.029734420213118219, 0.055596017363414456, 0.023774060096306261, 0.086893231766599, 0.0671543423517797, 0.16863230135165055, 0.064612975382352431, 0.089845065898632351, 0.16240088144427856, 0.10552362463724606, 0.011828672626315713)\
      \nj <- c(-0.69448357871239441, 1.)\
      \nk <- c(0.080739544327963347, 0.29275587806614473, 0.58578033077923275, 1.)\
      \nl <- structure(c(0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(5, 4))" |}]

(* XXX This test infinite loops on my machine

let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|
        data {
          int<lower=0> N;
          int<lower=0> M;
          int<lower=0, upper=N * M> K;
          int<upper=N> d_int_1d_ar[N];
          int<upper=N> d_int_3d_ar[N, M, K];
          real<lower=-2.0, upper=2.0> J;
          real d_real_1d_ar[N];
          real d_real_3d_ar[N, M, K];
          vector[N] d_vec;
          vector[N] d_1d_vec[N];
          vector[N] d_3d_vec[N, M, K];
          row_vector[N] d_row_vec;
          row_vector[N] d_1d_row_vec[N];
          row_vector[N] d_3d_row_vec[N, M, K];
          matrix<lower=0, upper=1>[2, 3] d_ar_mat[4, 5];
          simplex[N] d_simplex;
          simplex[N] d_1d_simplex[N];
          simplex[N] d_3d_simplex[N, M, K];
          cholesky_factor_cov[5, 4] d_cfcov_54;
          cholesky_factor_cov[3] d_cfcov_33;
          cholesky_factor_cov[3] d_cfcov_33_ar[K];
        }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "N <- 3\
      \nM <- 1\
      \nK <- 2\
      \nd_int_1d_ar <- c(-1, 2, 2)\
      \nd_int_3d_ar <- structure(c(1, 2, 3, 2, 0, -1), .Dim=c(3, 1, 2))\
      \nJ <- -0.937390293933291\
      \nd_real_1d_ar <- c(2.56799363086151, 4.0759938356540726, 3.604405750889411)\
      \nd_real_3d_ar <- structure(c(6.0288479433993629, 3.543689144366625, 4.1465170437036338, 5.8799711085519224, 4.521098476935741, 2.2826025797056464), .Dim=c(3, 1, 2))\
      \nd_vec <- c(5.3116509882058738, 3.7482903006745985, 5.508750812969728)\
      \nd_1d_vec <- structure(c(3.7780489469949972, 2.1600852257225154, 3.9660375311552749, 5.3741223139973622, 3.6598286733521297, 6.0158175418085342, 4.5701258402582194, 2.6451502425447266, 3.2425011320285027), .Dim=c(3, 3))\
      \nd_3d_vec <- structure(c(3.5720962307677091, 5.7213345511646363, 4.0319385317762162, 2.3295401414257744, 3.8281495864625956, 4.869813970717308, 3.7293083759369448, 6.97070615398329, 4.1512076186352216, 4.1949090422787174, 6.8138349711922652, 4.9461191671001892, 4.7922353997475788, 2.292622453020976, 3.226595023801782, 3.8556222147542085, 2.0095894885098069, 5.2448759493135153), .Dim=c(3, 1, 2, 3))\
      \nd_row_vec <- c(4.0434169569431706, 5.7759384905058795, 4.2138065257931459)\
      \nd_1d_row_vec <- structure(c(4.6676412390878905, 6.5986584016153875, 6.4287706833617158, 3.19883563012539, 2.5869872307079236, 2.0298667610240964, 2.4903795562578557, 2.1318346935923507, 5.5315257534514712), .Dim=c(3, 3))\
      \nd_3d_row_vec <- structure(c(6.0608327679881207, 3.3969401849295595, 4.9283096565285138, 2.3777024486238973, 6.4536316336809891, 6.2243138037125068, 5.406294923615655, 4.5064008029760334, 6.8340525891748189, 4.3293598111485032, 3.2151318313470769, 5.6252338866513316, 2.7137240155194529, 6.2480788401756451, 6.4835819351872654, 5.7992229887995883, 6.29275143528753, 5.8259738592178358), .Dim=c(3, 1, 2, 3))\
      \nd_ar_mat <- structure(c(0.19010828624332626, 0.77523119897494908, 0.075435907403433713, 0.10640786283706954, 0.9255170309180637, 0.97429570147644506, 0.31270201687960314, 0.67108049948136128, 0.97871332361306373, 0.90299905969887218, 0.90623281519386112, 0.395832644895654, 0.57821828544361364, 0.975395038570636, 0.78390466305359885, 0.9014260551054567, 0.581578803128905, 0.692956694659322, 0.20559486843854785, 0.71924027388196421, 0.79459953975728093, 0.22407621955437815, 0.0331482211644266, 0.29767813861434933, 0.78663225739768683, 0.17576132217686963, 0.16357954010812856, 0.51080157622790656, 0.44445381850779669, 0.55973460502049532, 0.34067444210810638, 0.7923933751954082, 0.89518896165033413, 0.015030294346858163, 0.13622771624317104, 0.43793668913684858, 0.13069440403330407, 0.41035818879220193, 0.6497000557737248, 0.35780805786467229, 0.49822874401216449, 0.51405972722094162, 0.77108493814941892, 0.63969386779910664, 0.027137609222934244, 0.90158697893162376, 0.5801137402153288, 0.67563924241031859, 0.36659486283528481, 0.97374370343899963, 0.91101702970394483, 0.64874258612805491, 0.78991889014591155, 0.70416418983239637, 0.85453819372996653, 0.1331771098716274, 0.90178256755944575, 0.80682474661040526, 0.42006156138308287, 0.53312849666186346, 0.91994370419748739, 0.0645661949334827, 0.90195439170705294, 0.46310136757192755, 0.36618179036051896, 0.10875698401043367, 0.42912560381062059, 0.28217720706625904, 0.73727587916715787, 0.760763820464, 0.28083725052478087, 0.96871518974459825, 0.32648564309712513, 0.65802867310905055, 0.94372088555262923, 0.612115128160238, 0.15572378717971833, 0.88571739200345234, 0.84919075650439724, 0.41461589756593475, 0.97022141344482138, 0.37399667670291026, 0.87516028181059635, 0.23083019388406939, 0.29201824556948469, 0.73738252703807183, 0.20495821973392631, 0.85124674765564845, 0.62502894666644682, 0.71651676085087923, 0.32234368458918788, 0.78382782365681281, 0.42241174496887768, 0.37368848174295793, 0.11839458744816142, 0.4442483267716999, 0.031145119767167891, 0.90928692941997247, 0.18822532999887831, 0.56797857787417749, 0.27600029727304715, 0.70107413958330755, 0.71061143479186961, 0.53296791805267507, 0.7609047403379835, 0.65864668749480892, 0.187060423355116, 0.67800624128286135, 0.80739555544465147, 0.56198012898460514, 0.11214741225685448, 0.34655572443742166, 0.70234904561486411, 0.85689633306737, 0.70138904116412959, 0.86493323130460953, 0.11800610357991351, 0.99435438254623754, 0.53857837713598755, 0.30265828158408009), .Dim=c(4, 5, 2, 3))\
      \nd_simplex <- c(0.30729721114989411, 0.23166736894495787, 0.46103541990514807)\
      \nd_1d_simplex <- structure(c(0.088444449727223429, 0.77945710856527861, 0.13209844170749788, 0.47063988392263983, 0.50671628568629334, 0.022643830391066874, 0.25726638414553332, 0.41903611877747748, 0.32369749707698914), .Dim=c(3, 3))\
      \nd_3d_simplex <- structure(c(0.026806758458343793, 0.276503877179793, 0.69668936436186313, 0.34801006182900285, 0.47131712267841813, 0.18067281549257905, 0.74034599341038165, 0.15014668749639, 0.10950731909322838, 0.36374798352295723, 0.17504619363987861, 0.46120582283716416, 0.4568916340781477, 0.20838925358574761, 0.33471911233610474, 0.079916199639062852, 0.880151205772848, 0.039932594588089045), .Dim=c(3, 1, 2, 3))\
      \nd_cfcov_54 <- structure(c(0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.), .Dim=c(5, 4))\
      \nd_cfcov_33 <- structure(c(1., 0., 0., 0., 1., 0., 0., 0., 1.), .Dim=c(3, 3))\
      \nd_cfcov_33_ar <- structure(c(1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1.), .Dim=c(2, 3, 3))" |}]

  *)
let%expect_test "whole program data generation check" =
  let open Parse in
  let ast =
    parse_string Parser.Incremental.program
      {|
      data {
        int<lower = 0> K;                     // players
        int<lower = 0> N;                     // games
        int<lower=1, upper = K> player1[N];   // player 1 for game n
        int<lower=1, upper = K> player0[N];   // player 0 for game n
        int<lower = 0, upper = 1> y[N];       // winner for game n
      }
      |}
  in
  let ast =
    Option.value_exn
      (Result.ok
         (Semantic_check.semantic_check_program
            (Option.value_exn (Result.ok ast))))
  in
  let str = print_data_prog ast in
  print_s [%sexp (str : string)] ;
  [%expect
    {|
       "K <- 24\
      \nN <- 22\
      \nplayer1 <- c(5, 19, 16, 16, 7, 12, 14, 1, 5, 8, 1, 9, 16, 24, 16, 10, 5, 16, 17, 4, 22, 16)\
      \nplayer0 <- c(18, 10, 10, 20, 1, 8, 24, 2, 3, 11, 8, 20, 3, 20, 1, 16, 13, 9, 4, 1, 5, 10)\
      \ny <- c(1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1)" |}]
